Show MIR
DefId(0:4 ~ test[fc21]::main)
_0:  @ () 
_1:  @ std::sync::Mutex<i32> 
_2:  @ std::sync::Mutex<i32> 
_3:  @ std::sync::MutexGuard<ReErased, i32> 
_4:  @ std::result::Result<std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>> 
_5:  @ &ReErased std::sync::Mutex<i32> 
_6:  @ std::sync::MutexGuard<ReErased, i32> 
_7:  @ std::result::Result<std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>> 
_8:  @ &ReErased std::sync::Mutex<i32> 
_9:  @ std::sync::MutexGuard<ReErased, i32> 
_10:  @ bool 
_11:  @ std::sync::MutexGuard<ReErased, i32> 
_12:  @ std::sync::MutexGuard<ReErased, i32> 
_13:  @ () 
_14:  @ std::fmt::Arguments<ReErased> 
_15:  @ &ReErased [&ReErased str] 
_16:  @ &ReErased [core::fmt::rt::Argument<ReErased>] 
_17:  @ &ReErased [core::fmt::rt::Argument<ReErased>; 1_usize] 
_18:  @ [core::fmt::rt::Argument<ReErased>; 1_usize] 
_19:  @ core::fmt::rt::Argument<ReErased> 
_20:  @ &ReErased std::sync::MutexGuard<ReErased, i32> 
_21:  @ &ReErased [&ReErased str; 2_usize] 
_22:  @ bool 
_23:  @ bool 

[a => _1, b => _2, a1 => _3, b1 => _6, c => _9]
bb 0 {
CleanUp: false
    Assign((_23, const false)) @ _23=const false @ Use
    Assign((_22, const false)) @ _22=const false @ Use
    _1 = std::sync::Mutex::<i32>::new(const 123_i32) -> [return: bb1, unwind continue] @ Call: FnDid: 6372
}
bb 1 {
CleanUp: false
    _2 = std::sync::Mutex::<i32>::new(const 24_i32) -> [return: bb2, unwind continue] @ Call: FnDid: 6372
}
bb 2 {
CleanUp: false
    Assign((_5, &_1)) @ _5=&_1 @ RefThe type is []
    _4 = std::sync::Mutex::<i32>::lock(move _5) -> [return: bb3, unwind continue] @ Call: FnDid: 6375
}
bb 3 {
CleanUp: false
    _3 = std::result::Result::<std::sync::MutexGuard<'_, i32>, std::sync::PoisonError<std::sync::MutexGuard<'_, i32>>>::unwrap(move _4) -> [return: bb4, unwind continue] @ Call: FnDid: 9195
}
bb 4 {
CleanUp: false
    Assign((_23, const true)) @ _23=const true @ Use
    Assign((_8, &_2)) @ _8=&_2 @ RefThe type is []
    _7 = std::sync::Mutex::<i32>::lock(move _8) -> [return: bb5, unwind: bb23] @ Call: FnDid: 6375
}
bb 5 {
CleanUp: false
    _6 = std::result::Result::<std::sync::MutexGuard<'_, i32>, std::sync::PoisonError<std::sync::MutexGuard<'_, i32>>>::unwrap(move _7) -> [return: bb6, unwind: bb23] @ Call: FnDid: 9195
}
bb 6 {
CleanUp: false
    Assign((_22, const true)) @ _22=const true @ Use
    Assign((_10, const true)) @ _10=const true @ Use
    switchInt(move _10) -> [0: bb8, otherwise: bb7] @ SwitchInt
}
bb 7 {
CleanUp: false
    Assign((_23, const false)) @ _23=const false @ Use
    Assign((_11, move _3)) @ _11=move _3 @ Use Move
    Assign((_9, move _11)) @ _9=move _11 @ Use Move
    goto -> bb9 @ Goto
}
bb 8 {
CleanUp: false
    Assign((_22, const false)) @ _22=const false @ Use
    Assign((_12, move _6)) @ _12=move _6 @ Use Move
    Assign((_9, move _12)) @ _9=move _12 @ Use Move
    goto -> bb9 @ Goto
}
bb 9 {
CleanUp: false
    Assign((_21, const _)) @ _21=const _ @ Use
    Assign((_15, _21 as &[&str] (PointerCoercion(Unsize)))) @ _15=_21 as &[&str] (PointerCoercion(Unsize)) @ Cast
    Assign((_20, &_9)) @ _20=&_9 @ RefThe type is []
    _19 = core::fmt::rt::Argument::<'_>::new_debug::<std::sync::MutexGuard<'_, i32>>(_20) -> [return: bb10, unwind: bb16] @ Call: FnDid: 9789
}
bb 10 {
CleanUp: false
    Assign((_18, [move _19])) @ _18=[move _19] @ Aggregate
    Assign((_17, &_18)) @ _17=&_18 @ RefThe type is []
    Assign((_16, _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)))) @ _16=_17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)) @ Cast
    _14 = std::fmt::Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb11, unwind: bb16] @ Call: FnDid: 9866
}
bb 11 {
CleanUp: false
    _13 = std::io::_print(move _14) -> [return: bb12, unwind: bb16] @ Call: FnDid: 3326
}
bb 12 {
CleanUp: false
    drop(_9) -> [return: bb13, unwind: bb21] @ Drop
}
bb 13 {
CleanUp: false
    switchInt(_22) -> [0: bb14, otherwise: bb18] @ SwitchInt
}
bb 14 {
CleanUp: false
    Assign((_22, const false)) @ _22=const false @ Use
    switchInt(_23) -> [0: bb15, otherwise: bb19] @ SwitchInt
}
bb 15 {
CleanUp: false
    Assign((_23, const false)) @ _23=const false @ Use
    return @ Return
}
bb 16 {
CleanUp: true
    drop(_9) -> [return: bb21, unwind terminate(cleanup)] @ Drop
}
bb 17 {
CleanUp: true
    resume @ UnwindResume
}
bb 18 {
CleanUp: false
    drop(_6) -> [return: bb14, unwind: bb23] @ Drop
}
bb 19 {
CleanUp: false
    drop(_3) -> [return: bb15, unwind continue] @ Drop
}
bb 20 {
CleanUp: true
    drop(_6) -> [return: bb23, unwind terminate(cleanup)] @ Drop
}
bb 21 {
CleanUp: true
    switchInt(_22) -> [0: bb23, otherwise: bb20] @ SwitchInt
}
bb 22 {
CleanUp: true
    drop(_3) -> [return: bb17, unwind terminate(cleanup)] @ Drop
}
bb 23 {
CleanUp: true
    switchInt(_23) -> [0: bb17, otherwise: bb22] @ SwitchInt
}

DefId(0:5 ~ test[fc21]::tt)
_0:  @ () 
_1:  @ &ReErased std::sync::Mutex<i32> 
_2:  @ () 

[b => _1]
bb 0 {
CleanUp: false
    _2 = tt2(_1) -> [return: bb1, unwind continue] @ Call: FnDid: 6
}
bb 1 {
CleanUp: false
    return @ Return
}

DefId(0:6 ~ test[fc21]::tt2)
_0:  @ () 
_1:  @ &ReErased std::sync::Mutex<i32> 

[b => _1]
bb 0 {
CleanUp: false
    return @ Return
}

