Show MIR
DefId(0:10 ~ test[fc21]::main)
_0:  @ () 
_1:  @ std::string::String 
_2:  @ A 
_3:  @ std::string::String 
_4:  @ i32 
_5:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_6:  @ std::sync::Mutex<i32> 
_7:  @ std::sync::Mutex<i32> 
_8:  @ i32 
_9:  @ std::result::Result<std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>> 
_10:  @ &ReErased std::sync::Mutex<i32> 
_11:  @ &ReErased std::sync::Mutex<i32> 
_12:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 

[a => _1, b => _2, n => _4, c => _5, e => _7, f => _9]
bb 0 {
CleanUp: false
    StorageLive(_1) @ StorageLive
    _1 = <std::string::String as std::convert::From<&str>>::from(const "123") -> [return: bb1, unwind: bb15] @ Call: FnDid: 2706
}
bb 1 {
CleanUp: false
    FakeRead((ForLet(None), _1)) @ FakeRead
    StorageLive(_2) @ StorageLive
    StorageLive(_3) @ StorageLive
    Assign((_3, move _1)) @ _3=move _1 @ Use Move
    Assign((_2, A { a: const 1_i32, b: const 2_u32, s: move _3 })) @ _2=A { a: const 1_i32, b: const 2_u32, s: move _3 } @ Aggregate
    drop(_3) -> [return: bb2, unwind: bb14] @ Drop
}
bb 2 {
CleanUp: false
    StorageDead(_3) @ StorageDead
    FakeRead((ForLet(None), _2)) @ FakeRead
    StorageLive(_4) @ StorageLive
    Assign((_4, const 1_i32)) @ _4=const 1_i32 @ Use
    FakeRead((ForLet(None), _4)) @ FakeRead
    StorageLive(_5) @ StorageLive
    StorageLive(_6) @ StorageLive
    _6 = std::sync::Mutex::<i32>::new(const 123_i32) -> [return: bb3, unwind: bb13] @ Call: FnDid: 6372
}
bb 3 {
CleanUp: false
    _5 = std::sync::Arc::<std::sync::Mutex<i32>>::new(move _6) -> [return: bb4, unwind: bb13] @ Call: FnDid: 6025
}
bb 4 {
CleanUp: false
    StorageDead(_6) @ StorageDead
    FakeRead((ForLet(None), _5)) @ FakeRead
    StorageLive(_7) @ StorageLive
    StorageLive(_8) @ StorageLive
    Assign((_8, _4)) @ _8=_4 @ Use Copy
    _7 = std::sync::Mutex::<i32>::new(move _8) -> [return: bb5, unwind: bb12] @ Call: FnDid: 6372
}
bb 5 {
CleanUp: false
    StorageDead(_8) @ StorageDead
    FakeRead((ForLet(None), _7)) @ FakeRead
    StorageLive(_9) @ StorageLive
    StorageLive(_10) @ StorageLive
    StorageLive(_11) @ StorageLive
    StorageLive(_12) @ StorageLive
    Assign((_12, &_5)) @ _12=&_5 @ RefThe type is []
    _11 = <std::sync::Arc<std::sync::Mutex<i32>> as std::ops::Deref>::deref(move _12) -> [return: bb6, unwind: bb12] @ Call: FnDid: 3101
}
bb 6 {
CleanUp: false
    Assign((_10, &(*_11))) @ _10=&(*_11) @ RefThe type is [Deref]
    StorageDead(_12) @ StorageDead
    _9 = std::sync::Mutex::<i32>::lock(move _10) -> [return: bb7, unwind: bb12] @ Call: FnDid: 6375
}
bb 7 {
CleanUp: false
    StorageDead(_10) @ StorageDead
    FakeRead((ForLet(None), _9)) @ FakeRead
    StorageDead(_11) @ StorageDead
    Assign((_0, const ())) @ _0=const () @ Use
    drop(_9) -> [return: bb8, unwind: bb12] @ Drop
}
bb 8 {
CleanUp: false
    StorageDead(_9) @ StorageDead
    StorageDead(_7) @ StorageDead
    drop(_5) -> [return: bb9, unwind: bb13] @ Drop
}
bb 9 {
CleanUp: false
    StorageDead(_5) @ StorageDead
    StorageDead(_4) @ StorageDead
    drop(_2) -> [return: bb10, unwind: bb14] @ Drop
}
bb 10 {
CleanUp: false
    StorageDead(_2) @ StorageDead
    drop(_1) -> [return: bb11, unwind: bb15] @ Drop
}
bb 11 {
CleanUp: false
    StorageDead(_1) @ StorageDead
    return @ Return
}
bb 12 {
CleanUp: true
    drop(_5) -> [return: bb13, unwind terminate(cleanup)] @ Drop
}
bb 13 {
CleanUp: true
    drop(_2) -> [return: bb14, unwind terminate(cleanup)] @ Drop
}
bb 14 {
CleanUp: true
    drop(_1) -> [return: bb15, unwind terminate(cleanup)] @ Drop
}
bb 15 {
CleanUp: true
    resume @ UnwindResume
}

