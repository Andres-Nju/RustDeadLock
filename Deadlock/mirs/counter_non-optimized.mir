Show MIR
DefId(0:10 ~ counter[c400]::{impl#0}::new)
_0:  @ Counter 

bb 0 {
CleanUp: false
    Assign((_0, Counter { count: const 0_i32 })) @ _0=Counter { count: const 0_i32 } @ Aggregate
    return @ Return
}

DefId(0:11 ~ counter[c400]::{impl#0}::increment)
_0:  @ () 
_1:  @ &ReErased mut Counter 
_2:  @ (i32, bool) 
_3:  @ () 
_4:  @ () 
_5:  @ std::fmt::Arguments<ReErased> 
_6:  @ &ReErased [&ReErased str] 
_7:  @ &ReErased [&ReErased str; 2_usize] 
_8:  @ &ReErased [&ReErased str; 2_usize] 
_9:  @ [&ReErased str; 2_usize] 
_10:  @ &ReErased [core::fmt::rt::Argument<ReErased>] 
_11:  @ &ReErased [core::fmt::rt::Argument<ReErased>; 1_usize] 
_12:  @ &ReErased [core::fmt::rt::Argument<ReErased>; 1_usize] 
_13:  @ [core::fmt::rt::Argument<ReErased>; 1_usize] 
_14:  @ core::fmt::rt::Argument<ReErased> 
_15:  @ &ReErased i32 
_16:  @ &ReErased i32 

bb 0 {
CleanUp: false
    Assign((_2, CheckedAdd(((*_1).0: i32), const 1_i32))) @ _2=CheckedAdd(((*_1).0: i32), const 1_i32) @ CheckedBinaryOp
    assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: i32), const 1_i32) -> [success: bb1, unwind: bb5] @ Assert
}
bb 1 {
CleanUp: false
    Assign((((*_1).0: i32), move (_2.0: i32))) @ ((*_1).0: i32)=move (_2.0: i32) @ Use
    StorageLive(_3) @ StorageLive
    StorageLive(_4) @ StorageLive
    StorageLive(_5) @ StorageLive
    StorageLive(_6) @ StorageLive
    StorageLive(_7) @ StorageLive
    StorageLive(_8) @ StorageLive
    StorageLive(_9) @ StorageLive
    Assign((_9, [const "Count after increment: ", const "\n"])) @ _9=[const "Count after increment: ", const "\n"] @ Aggregate
    Assign((_8, &_9)) @ _8=&_9 @ Ref
    Assign((_7, &(*_8))) @ _7=&(*_8) @ Ref
    Assign((_6, move _7 as &[&str] (PointerCoercion(Unsize)))) @ _6=move _7 as &[&str] (PointerCoercion(Unsize)) @ Cast
    StorageDead(_7) @ StorageDead
    StorageLive(_10) @ StorageLive
    StorageLive(_11) @ StorageLive
    StorageLive(_12) @ StorageLive
    StorageLive(_13) @ StorageLive
    StorageLive(_14) @ StorageLive
    StorageLive(_15) @ StorageLive
    StorageLive(_16) @ StorageLive
    Assign((_16, &((*_1).0: i32))) @ _16=&((*_1).0: i32) @ Ref
    Assign((_15, &(*_16))) @ _15=&(*_16) @ Ref
    _14 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _15) -> [return: bb2, unwind: bb5] @ Call: FnDid: 9786
}
bb 2 {
CleanUp: false
    StorageDead(_15) @ StorageDead
    Assign((_13, [move _14])) @ _13=[move _14] @ Aggregate
    StorageDead(_14) @ StorageDead
    Assign((_12, &_13)) @ _12=&_13 @ Ref
    Assign((_11, &(*_12))) @ _11=&(*_12) @ Ref
    Assign((_10, move _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)))) @ _10=move _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)) @ Cast
    StorageDead(_11) @ StorageDead
    _5 = std::fmt::Arguments::<'_>::new_v1(move _6, move _10) -> [return: bb3, unwind: bb5] @ Call: FnDid: 9866
}
bb 3 {
CleanUp: false
    StorageDead(_10) @ StorageDead
    StorageDead(_6) @ StorageDead
    _4 = std::io::_print(move _5) -> [return: bb4, unwind: bb5] @ Call: FnDid: 3326
}
bb 4 {
CleanUp: false
    StorageDead(_5) @ StorageDead
    StorageDead(_16) @ StorageDead
    StorageDead(_13) @ StorageDead
    StorageDead(_12) @ StorageDead
    StorageDead(_9) @ StorageDead
    StorageDead(_8) @ StorageDead
    StorageDead(_4) @ StorageDead
    Assign((_3, const ())) @ _3=const () @ Use
    StorageDead(_3) @ StorageDead
    Assign((_0, const ())) @ _0=const () @ Use
    return @ Return
}
bb 5 {
CleanUp: true
    resume @ UnwindResume
}

DefId(0:12 ~ counter[c400]::{impl#0}::get_count)
_0:  @ i32 
_1:  @ &ReErased Counter 

bb 0 {
CleanUp: false
    Assign((_0, ((*_1).0: i32))) @ _0=((*_1).0: i32) @ Use
    return @ Return
}

DefId(0:13 ~ counter[c400]::do_work)
_0:  @ () 
_1:  @ &ReErased mut Counter 
_2:  @ std::ops::Range<i32> 
_3:  @ std::ops::Range<i32> 
_4:  @ std::ops::Range<i32> 
_5:  @ () 
_6:  @ () 
_7:  @ std::option::Option<i32> 
_8:  @ &ReErased mut std::ops::Range<i32> 
_9:  @ &ReErased mut std::ops::Range<i32> 
_10:  @ isize 
_11:  @ ! 
_12:  @ () 
_13:  @ &ReErased mut Counter 
_14:  @ () 
_15:  @ std::time::Duration 

bb 0 {
CleanUp: false
    StorageLive(_2) @ StorageLive
    StorageLive(_3) @ StorageLive
    Assign((_3, std::ops::Range::<i32> { start: const 0_i32, end: const 5_i32 })) @ _3=std::ops::Range::<i32> { start: const 0_i32, end: const 5_i32 } @ Aggregate
    _2 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _3) -> [return: bb1, unwind: bb17] @ Call: FnDid: 7792
}
bb 1 {
CleanUp: false
    StorageDead(_3) @ StorageDead
    PlaceMention(_2) @ PlaceMention
    StorageLive(_4) @ StorageLive
    Assign((_4, move _2)) @ _4=move _2 @ Use
    goto -> bb2 @ Goto
}
bb 2 {
CleanUp: false
    falseUnwind -> [real: bb3, unwind: bb17] @ FalseUnwind
}
bb 3 {
CleanUp: false
    StorageLive(_6) @ StorageLive
    StorageLive(_7) @ StorageLive
    StorageLive(_8) @ StorageLive
    StorageLive(_9) @ StorageLive
    Assign((_9, &mut _4)) @ _9=&mut _4 @ Ref
    Assign((_8, &mut (*_9))) @ _8=&mut (*_9) @ Ref
    _7 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _8) -> [return: bb4, unwind: bb17] @ Call: FnDid: 7938
}
bb 4 {
CleanUp: false
    StorageDead(_8) @ StorageDead
    PlaceMention(_7) @ PlaceMention
    Assign((_10, discriminant(_7))) @ _10=discriminant(_7) @ Discriminant
    switchInt(move _10) -> [0: bb5, 1: bb6, otherwise: bb7] @ SwitchInt
}
bb 5 {
CleanUp: false
    falseEdge -> [real: bb8, imaginary: bb6] @ FalseEdge
}
bb 6 {
CleanUp: false
    StorageLive(_12) @ StorageLive
    StorageLive(_13) @ StorageLive
    Assign((_13, &mut (*_1))) @ _13=&mut (*_1) @ Ref
    _12 = Counter::increment(move _13) -> [return: bb11, unwind: bb17] @ Call: FnDid: 11
}
bb 7 {
CleanUp: false
    FakeRead((ForMatchedPlace(None), _7)) @ FakeRead
    unreachable @ Unreachable
}
bb 8 {
CleanUp: false
    Assign((_0, const ())) @ _0=const () @ Use
    goto -> bb15 @ Goto
}
bb 9 {
CleanUp: false
    unreachable @ Unreachable
}
bb 10 {
CleanUp: false
    goto -> bb14 @ Goto
}
bb 11 {
CleanUp: false
    StorageDead(_13) @ StorageDead
    StorageDead(_12) @ StorageDead
    StorageLive(_14) @ StorageLive
    StorageLive(_15) @ StorageLive
    _15 = std::time::Duration::from_millis(const 100_u64) -> [return: bb12, unwind: bb17] @ Call: FnDid: 12911
}
bb 12 {
CleanUp: false
    _14 = std::thread::sleep(move _15) -> [return: bb13, unwind: bb17] @ Call: FnDid: 502
}
bb 13 {
CleanUp: false
    StorageDead(_15) @ StorageDead
    StorageDead(_14) @ StorageDead
    Assign((_6, const ())) @ _6=const () @ Use
    goto -> bb14 @ Goto
}
bb 14 {
CleanUp: false
    StorageDead(_9) @ StorageDead
    StorageDead(_7) @ StorageDead
    StorageDead(_6) @ StorageDead
    Assign((_5, const ())) @ _5=const () @ Use
    goto -> bb2 @ Goto
}
bb 15 {
CleanUp: false
    StorageDead(_9) @ StorageDead
    StorageDead(_7) @ StorageDead
    StorageDead(_6) @ StorageDead
    StorageDead(_4) @ StorageDead
    goto -> bb16 @ Goto
}
bb 16 {
CleanUp: false
    StorageDead(_2) @ StorageDead
    return @ Return
}
bb 17 {
CleanUp: true
    resume @ UnwindResume
}

DefId(0:14 ~ counter[c400]::main)
_0:  @ () 
_1:  @ Counter 
_2:  @ std::sync::Arc<std::sync::Mutex<Counter>, std::alloc::Global> 
_3:  @ std::sync::Mutex<Counter> 
_4:  @ Counter 
_5:  @ std::vec::Vec<std::thread::JoinHandle<()>, std::alloc::Global> 
_6:  @ () 
_7:  @ std::ops::Range<i32> 
_8:  @ std::ops::Range<i32> 
_9:  @ std::ops::Range<i32> 
_10:  @ () 
_11:  @ () 
_12:  @ std::option::Option<i32> 
_13:  @ &ReErased mut std::ops::Range<i32> 
_14:  @ &ReErased mut std::ops::Range<i32> 
_15:  @ isize 
_16:  @ ! 
_17:  @ std::sync::Arc<std::sync::Mutex<Counter>, std::alloc::Global> 
_18:  @ &ReErased std::sync::Arc<std::sync::Mutex<Counter>, std::alloc::Global> 
_19:  @ &ReErased std::sync::Arc<std::sync::Mutex<Counter>, std::alloc::Global> 
_20:  @ std::thread::JoinHandle<()> 
_21:  @ Closure(DefId(0:15 ~ counter[c400]::main::{closure#0}), [i32, Binder(extern "RustCall" fn(()), []), (std::sync::Arc<std::sync::Mutex<Counter>, std::alloc::Global>,)]) 
_22:  @ () 
_23:  @ &ReErased mut std::vec::Vec<std::thread::JoinHandle<()>, std::alloc::Global> 
_24:  @ std::thread::JoinHandle<()> 
_25:  @ () 
_26:  @ std::vec::IntoIter<std::thread::JoinHandle<()>, std::alloc::Global> 
_27:  @ std::vec::Vec<std::thread::JoinHandle<()>, std::alloc::Global> 
_28:  @ std::vec::IntoIter<std::thread::JoinHandle<()>, std::alloc::Global> 
_29:  @ () 
_30:  @ std::option::Option<std::thread::JoinHandle<()>> 
_31:  @ &ReErased mut std::vec::IntoIter<std::thread::JoinHandle<()>, std::alloc::Global> 
_32:  @ &ReErased mut std::vec::IntoIter<std::thread::JoinHandle<()>, std::alloc::Global> 
_33:  @ isize 
_34:  @ ! 
_35:  @ std::thread::JoinHandle<()> 
_36:  @ () 
_37:  @ std::result::Result<(), std::boxed::Box<dyn [Binder(Trait(std::any::Any), []), Binder(AutoTrait(DefId(2:32445 ~ core[0c3f]::marker::Send)), [])] + ReErased, std::alloc::Global>> 
_38:  @ std::thread::JoinHandle<()> 
_39:  @ i32 
_40:  @ &ReErased Counter 
_41:  @ &ReErased Counter 
_42:  @ &ReErased std::sync::MutexGuard<ReErased, Counter> 
_43:  @ std::sync::MutexGuard<ReErased, Counter> 
_44:  @ std::result::Result<std::sync::MutexGuard<ReErased, Counter>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, Counter>>> 
_45:  @ &ReErased std::sync::Mutex<Counter> 
_46:  @ &ReErased std::sync::Mutex<Counter> 
_47:  @ &ReErased std::sync::Arc<std::sync::Mutex<Counter>, std::alloc::Global> 
_48:  @ () 
_49:  @ () 
_50:  @ std::fmt::Arguments<ReErased> 
_51:  @ &ReErased [&ReErased str] 
_52:  @ &ReErased [&ReErased str; 2_usize] 
_53:  @ &ReErased [&ReErased str; 2_usize] 
_54:  @ [&ReErased str; 2_usize] 
_55:  @ &ReErased [core::fmt::rt::Argument<ReErased>] 
_56:  @ &ReErased [core::fmt::rt::Argument<ReErased>; 1_usize] 
_57:  @ &ReErased [core::fmt::rt::Argument<ReErased>; 1_usize] 
_58:  @ [core::fmt::rt::Argument<ReErased>; 1_usize] 
_59:  @ core::fmt::rt::Argument<ReErased> 
_60:  @ &ReErased i32 
_61:  @ &ReErased i32 

bb 0 {
CleanUp: false
    StorageLive(_1) @ StorageLive
    _1 = Counter::new() -> [return: bb1, unwind: bb70] @ Call: FnDid: 10
}
bb 1 {
CleanUp: false
    FakeRead((ForLet(None), _1)) @ FakeRead
    StorageLive(_2) @ StorageLive
    StorageLive(_3) @ StorageLive
    StorageLive(_4) @ StorageLive
    Assign((_4, move _1)) @ _4=move _1 @ Use
    _3 = std::sync::Mutex::<Counter>::new(move _4) -> [return: bb2, unwind: bb70] @ Call: FnDid: 6372
}
bb 2 {
CleanUp: false
    StorageDead(_4) @ StorageDead
    _2 = std::sync::Arc::<std::sync::Mutex<Counter>>::new(move _3) -> [return: bb3, unwind: bb70] @ Call: FnDid: 6025
}
bb 3 {
CleanUp: false
    StorageDead(_3) @ StorageDead
    FakeRead((ForLet(None), _2)) @ FakeRead
    StorageLive(_5) @ StorageLive
    _5 = std::vec::Vec::<std::thread::JoinHandle<()>>::new() -> [return: bb4, unwind: bb69] @ Call: FnDid: 6967
}
bb 4 {
CleanUp: false
    FakeRead((ForLet(None), _5)) @ FakeRead
    StorageLive(_6) @ StorageLive
    StorageLive(_7) @ StorageLive
    StorageLive(_8) @ StorageLive
    Assign((_8, std::ops::Range::<i32> { start: const 0_i32, end: const 3_i32 })) @ _8=std::ops::Range::<i32> { start: const 0_i32, end: const 3_i32 } @ Aggregate
    _7 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _8) -> [return: bb5, unwind: bb68] @ Call: FnDid: 7792
}
bb 5 {
CleanUp: false
    StorageDead(_8) @ StorageDead
    PlaceMention(_7) @ PlaceMention
    StorageLive(_9) @ StorageLive
    Assign((_9, move _7)) @ _9=move _7 @ Use
    goto -> bb6 @ Goto
}
bb 6 {
CleanUp: false
    falseUnwind -> [real: bb7, unwind: bb68] @ FalseUnwind
}
bb 7 {
CleanUp: false
    StorageLive(_11) @ StorageLive
    StorageLive(_12) @ StorageLive
    StorageLive(_13) @ StorageLive
    StorageLive(_14) @ StorageLive
    Assign((_14, &mut _9)) @ _14=&mut _9 @ Ref
    Assign((_13, &mut (*_14))) @ _13=&mut (*_14) @ Ref
    _12 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _13) -> [return: bb8, unwind: bb68] @ Call: FnDid: 7938
}
bb 8 {
CleanUp: false
    StorageDead(_13) @ StorageDead
    PlaceMention(_12) @ PlaceMention
    Assign((_15, discriminant(_12))) @ _15=discriminant(_12) @ Discriminant
    switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb11] @ SwitchInt
}
bb 9 {
CleanUp: false
    falseEdge -> [real: bb12, imaginary: bb10] @ FalseEdge
}
bb 10 {
CleanUp: false
    StorageLive(_17) @ StorageLive
    StorageLive(_18) @ StorageLive
    StorageLive(_19) @ StorageLive
    Assign((_19, &_2)) @ _19=&_2 @ Ref
    Assign((_18, &(*_19))) @ _18=&(*_19) @ Ref
    _17 = <std::sync::Arc<std::sync::Mutex<Counter>> as std::clone::Clone>::clone(move _18) -> [return: bb15, unwind: bb68] @ Call: FnDid: 2441
}
bb 11 {
CleanUp: false
    FakeRead((ForMatchedPlace(None), _12)) @ FakeRead
    unreachable @ Unreachable
}
bb 12 {
CleanUp: false
    Assign((_6, const ())) @ _6=const () @ Use
    goto -> bb21 @ Goto
}
bb 13 {
CleanUp: false
    unreachable @ Unreachable
}
bb 14 {
CleanUp: false
    goto -> bb20 @ Goto
}
bb 15 {
CleanUp: false
    StorageDead(_18) @ StorageDead
    FakeRead((ForLet(None), _17)) @ FakeRead
    StorageDead(_19) @ StorageDead
    StorageLive(_20) @ StorageLive
    StorageLive(_21) @ StorageLive
    Assign((_21, {closure@test/counter.rs:38:36: 38:43} { counter: move _17 })) @ _21={closure@test/counter.rs:38:36: 38:43} { counter: move _17 } @ Aggregate
    _20 = std::thread::spawn::<{closure@test/counter.rs:38:36: 38:43}, ()>(move _21) -> [return: bb16, unwind: bb66] @ Call: FnDid: 495
}
bb 16 {
CleanUp: false
    StorageDead(_21) @ StorageDead
    FakeRead((ForLet(None), _20)) @ FakeRead
    StorageLive(_22) @ StorageLive
    StorageLive(_23) @ StorageLive
    Assign((_23, &mut _5)) @ _23=&mut _5 @ Ref
    StorageLive(_24) @ StorageLive
    Assign((_24, move _20)) @ _24=move _20 @ Use
    _22 = std::vec::Vec::<std::thread::JoinHandle<()>>::push(move _23, move _24) -> [return: bb17, unwind: bb64] @ Call: FnDid: 7041
}
bb 17 {
CleanUp: false
    StorageDead(_24) @ StorageDead
    StorageDead(_23) @ StorageDead
    StorageDead(_22) @ StorageDead
    Assign((_11, const ())) @ _11=const () @ Use
    drop(_20) -> [return: bb18, unwind: bb67] @ Drop
}
bb 18 {
CleanUp: false
    StorageDead(_20) @ StorageDead
    drop(_17) -> [return: bb19, unwind: bb68] @ Drop
}
bb 19 {
CleanUp: false
    StorageDead(_17) @ StorageDead
    goto -> bb20 @ Goto
}
bb 20 {
CleanUp: false
    StorageDead(_14) @ StorageDead
    StorageDead(_12) @ StorageDead
    StorageDead(_11) @ StorageDead
    Assign((_10, const ())) @ _10=const () @ Use
    goto -> bb6 @ Goto
}
bb 21 {
CleanUp: false
    StorageDead(_14) @ StorageDead
    StorageDead(_12) @ StorageDead
    StorageDead(_11) @ StorageDead
    StorageDead(_9) @ StorageDead
    goto -> bb22 @ Goto
}
bb 22 {
CleanUp: false
    StorageDead(_7) @ StorageDead
    StorageDead(_6) @ StorageDead
    StorageLive(_25) @ StorageLive
    StorageLive(_26) @ StorageLive
    StorageLive(_27) @ StorageLive
    Assign((_27, move _5)) @ _27=move _5 @ Use
    _26 = <std::vec::Vec<std::thread::JoinHandle<()>> as std::iter::IntoIterator>::into_iter(move _27) -> [return: bb23, unwind: bb63] @ Call: FnDid: 7792
}
bb 23 {
CleanUp: false
    StorageDead(_27) @ StorageDead
    PlaceMention(_26) @ PlaceMention
    StorageLive(_28) @ StorageLive
    Assign((_28, move _26)) @ _28=move _26 @ Use
    goto -> bb24 @ Goto
}
bb 24 {
CleanUp: false
    falseUnwind -> [real: bb25, unwind: bb61] @ FalseUnwind
}
bb 25 {
CleanUp: false
    StorageLive(_29) @ StorageLive
    StorageLive(_30) @ StorageLive
    StorageLive(_31) @ StorageLive
    StorageLive(_32) @ StorageLive
    Assign((_32, &mut _28)) @ _32=&mut _28 @ Ref
    Assign((_31, &mut (*_32))) @ _31=&mut (*_32) @ Ref
    _30 = <std::vec::IntoIter<std::thread::JoinHandle<()>> as std::iter::Iterator>::next(move _31) -> [return: bb26, unwind: bb61] @ Call: FnDid: 7938
}
bb 26 {
CleanUp: false
    StorageDead(_31) @ StorageDead
    PlaceMention(_30) @ PlaceMention
    Assign((_33, discriminant(_30))) @ _33=discriminant(_30) @ Discriminant
    switchInt(move _33) -> [0: bb27, 1: bb28, otherwise: bb29] @ SwitchInt
}
bb 27 {
CleanUp: false
    falseEdge -> [real: bb30, imaginary: bb28] @ FalseEdge
}
bb 28 {
CleanUp: false
    StorageLive(_35) @ StorageLive
    Assign((_35, move ((_30 as Some).0: std::thread::JoinHandle<()>))) @ _35=move ((_30 as Some).0: std::thread::JoinHandle<()>) @ Use
    StorageLive(_36) @ StorageLive
    StorageLive(_37) @ StorageLive
    StorageLive(_38) @ StorageLive
    Assign((_38, move _35)) @ _38=move _35 @ Use
    _37 = std::thread::JoinHandle::<()>::join(move _38) -> [return: bb33, unwind: bb58] @ Call: FnDid: 568
}
bb 29 {
CleanUp: false
    FakeRead((ForMatchedPlace(None), _30)) @ FakeRead
    unreachable @ Unreachable
}
bb 30 {
CleanUp: false
    Assign((_25, const ())) @ _25=const () @ Use
    goto -> bb38 @ Goto
}
bb 31 {
CleanUp: false
    unreachable @ Unreachable
}
bb 32 {
CleanUp: false
    goto -> bb36 @ Goto
}
bb 33 {
CleanUp: false
    StorageDead(_38) @ StorageDead
    _36 = std::result::Result::<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>::unwrap(move _37) -> [return: bb34, unwind: bb57] @ Call: FnDid: 9195
}
bb 34 {
CleanUp: false
    StorageDead(_37) @ StorageDead
    StorageDead(_36) @ StorageDead
    Assign((_29, const ())) @ _29=const () @ Use
    drop(_35) -> [return: bb35, unwind: bb60] @ Drop
}
bb 35 {
CleanUp: false
    StorageDead(_35) @ StorageDead
    goto -> bb36 @ Goto
}
bb 36 {
CleanUp: false
    drop(_30) -> [return: bb37, unwind: bb61] @ Drop
}
bb 37 {
CleanUp: false
    StorageDead(_32) @ StorageDead
    StorageDead(_30) @ StorageDead
    StorageDead(_29) @ StorageDead
    Assign((_10, const ())) @ _10=const () @ Use
    goto -> bb24 @ Goto
}
bb 38 {
CleanUp: false
    drop(_30) -> [return: bb39, unwind: bb61] @ Drop
}
bb 39 {
CleanUp: false
    StorageDead(_32) @ StorageDead
    StorageDead(_30) @ StorageDead
    StorageDead(_29) @ StorageDead
    drop(_28) -> [return: bb40, unwind: bb62] @ Drop
}
bb 40 {
CleanUp: false
    StorageDead(_28) @ StorageDead
    goto -> bb41 @ Goto
}
bb 41 {
CleanUp: false
    drop(_26) -> [return: bb42, unwind: bb68] @ Drop
}
bb 42 {
CleanUp: false
    StorageDead(_26) @ StorageDead
    StorageDead(_25) @ StorageDead
    StorageLive(_39) @ StorageLive
    StorageLive(_40) @ StorageLive
    StorageLive(_41) @ StorageLive
    StorageLive(_42) @ StorageLive
    StorageLive(_43) @ StorageLive
    StorageLive(_44) @ StorageLive
    StorageLive(_45) @ StorageLive
    StorageLive(_46) @ StorageLive
    StorageLive(_47) @ StorageLive
    Assign((_47, &_2)) @ _47=&_2 @ Ref
    _46 = <std::sync::Arc<std::sync::Mutex<Counter>> as std::ops::Deref>::deref(move _47) -> [return: bb43, unwind: bb68] @ Call: FnDid: 3101
}
bb 43 {
CleanUp: false
    Assign((_45, &(*_46))) @ _45=&(*_46) @ Ref
    StorageDead(_47) @ StorageDead
    _44 = std::sync::Mutex::<Counter>::lock(move _45) -> [return: bb44, unwind: bb68] @ Call: FnDid: 6375
}
bb 44 {
CleanUp: false
    StorageDead(_45) @ StorageDead
    _43 = std::result::Result::<std::sync::MutexGuard<'_, Counter>, std::sync::PoisonError<std::sync::MutexGuard<'_, Counter>>>::unwrap(move _44) -> [return: bb45, unwind: bb56] @ Call: FnDid: 9195
}
bb 45 {
CleanUp: false
    Assign((_42, &_43)) @ _42=&_43 @ Ref
    _41 = <std::sync::MutexGuard<'_, Counter> as std::ops::Deref>::deref(move _42) -> [return: bb46, unwind: bb54] @ Call: FnDid: 3101
}
bb 46 {
CleanUp: false
    Assign((_40, &(*_41))) @ _40=&(*_41) @ Ref
    StorageDead(_44) @ StorageDead
    StorageDead(_42) @ StorageDead
    _39 = Counter::get_count(move _40) -> [return: bb47, unwind: bb55] @ Call: FnDid: 12
}
bb 47 {
CleanUp: false
    StorageDead(_40) @ StorageDead
    FakeRead((ForLet(None), _39)) @ FakeRead
    drop(_43) -> [return: bb48, unwind: bb68] @ Drop
}
bb 48 {
CleanUp: false
    StorageDead(_46) @ StorageDead
    StorageDead(_43) @ StorageDead
    StorageDead(_41) @ StorageDead
    StorageLive(_48) @ StorageLive
    StorageLive(_49) @ StorageLive
    StorageLive(_50) @ StorageLive
    StorageLive(_51) @ StorageLive
    StorageLive(_52) @ StorageLive
    StorageLive(_53) @ StorageLive
    StorageLive(_54) @ StorageLive
    Assign((_54, [const "Final count: ", const "\n"])) @ _54=[const "Final count: ", const "\n"] @ Aggregate
    Assign((_53, &_54)) @ _53=&_54 @ Ref
    Assign((_52, &(*_53))) @ _52=&(*_53) @ Ref
    Assign((_51, move _52 as &[&str] (PointerCoercion(Unsize)))) @ _51=move _52 as &[&str] (PointerCoercion(Unsize)) @ Cast
    StorageDead(_52) @ StorageDead
    StorageLive(_55) @ StorageLive
    StorageLive(_56) @ StorageLive
    StorageLive(_57) @ StorageLive
    StorageLive(_58) @ StorageLive
    StorageLive(_59) @ StorageLive
    StorageLive(_60) @ StorageLive
    StorageLive(_61) @ StorageLive
    Assign((_61, &_39)) @ _61=&_39 @ Ref
    Assign((_60, &(*_61))) @ _60=&(*_61) @ Ref
    _59 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _60) -> [return: bb49, unwind: bb68] @ Call: FnDid: 9786
}
bb 49 {
CleanUp: false
    StorageDead(_60) @ StorageDead
    Assign((_58, [move _59])) @ _58=[move _59] @ Aggregate
    StorageDead(_59) @ StorageDead
    Assign((_57, &_58)) @ _57=&_58 @ Ref
    Assign((_56, &(*_57))) @ _56=&(*_57) @ Ref
    Assign((_55, move _56 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)))) @ _55=move _56 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)) @ Cast
    StorageDead(_56) @ StorageDead
    _50 = std::fmt::Arguments::<'_>::new_v1(move _51, move _55) -> [return: bb50, unwind: bb68] @ Call: FnDid: 9866
}
bb 50 {
CleanUp: false
    StorageDead(_55) @ StorageDead
    StorageDead(_51) @ StorageDead
    _49 = std::io::_print(move _50) -> [return: bb51, unwind: bb68] @ Call: FnDid: 3326
}
bb 51 {
CleanUp: false
    StorageDead(_50) @ StorageDead
    StorageDead(_61) @ StorageDead
    StorageDead(_58) @ StorageDead
    StorageDead(_57) @ StorageDead
    StorageDead(_54) @ StorageDead
    StorageDead(_53) @ StorageDead
    StorageDead(_49) @ StorageDead
    Assign((_48, const ())) @ _48=const () @ Use
    StorageDead(_48) @ StorageDead
    Assign((_0, const ())) @ _0=const () @ Use
    StorageDead(_39) @ StorageDead
    drop(_5) -> [return: bb52, unwind: bb69] @ Drop
}
bb 52 {
CleanUp: false
    StorageDead(_5) @ StorageDead
    drop(_2) -> [return: bb53, unwind: bb70] @ Drop
}
bb 53 {
CleanUp: false
    StorageDead(_2) @ StorageDead
    StorageDead(_1) @ StorageDead
    return @ Return
}
bb 54 {
CleanUp: true
    drop(_44) -> [return: bb55, unwind terminate(cleanup)] @ Drop
}
bb 55 {
CleanUp: true
    drop(_43) -> [return: bb68, unwind terminate(cleanup)] @ Drop
}
bb 56 {
CleanUp: true
    drop(_44) -> [return: bb68, unwind terminate(cleanup)] @ Drop
}
bb 57 {
CleanUp: true
    drop(_37) -> [return: bb59, unwind terminate(cleanup)] @ Drop
}
bb 58 {
CleanUp: true
    drop(_38) -> [return: bb59, unwind terminate(cleanup)] @ Drop
}
bb 59 {
CleanUp: true
    drop(_35) -> [return: bb60, unwind terminate(cleanup)] @ Drop
}
bb 60 {
CleanUp: true
    drop(_30) -> [return: bb61, unwind terminate(cleanup)] @ Drop
}
bb 61 {
CleanUp: true
    drop(_28) -> [return: bb62, unwind terminate(cleanup)] @ Drop
}
bb 62 {
CleanUp: true
    drop(_26) -> [return: bb68, unwind terminate(cleanup)] @ Drop
}
bb 63 {
CleanUp: true
    drop(_27) -> [return: bb68, unwind terminate(cleanup)] @ Drop
}
bb 64 {
CleanUp: true
    drop(_24) -> [return: bb65, unwind terminate(cleanup)] @ Drop
}
bb 65 {
CleanUp: true
    drop(_20) -> [return: bb67, unwind terminate(cleanup)] @ Drop
}
bb 66 {
CleanUp: true
    drop(_21) -> [return: bb67, unwind terminate(cleanup)] @ Drop
}
bb 67 {
CleanUp: true
    drop(_17) -> [return: bb68, unwind terminate(cleanup)] @ Drop
}
bb 68 {
CleanUp: true
    drop(_5) -> [return: bb69, unwind terminate(cleanup)] @ Drop
}
bb 69 {
CleanUp: true
    drop(_2) -> [return: bb70, unwind terminate(cleanup)] @ Drop
}
bb 70 {
CleanUp: true
    resume @ UnwindResume
}

DefId(0:15 ~ counter[c400]::main::{closure#0})
_0:  @ () 
_1:  @ Closure(DefId(0:15 ~ counter[c400]::main::{closure#0}), [i32, Binder(extern "RustCall" fn(()), []), (std::sync::Arc<std::sync::Mutex<Counter>, std::alloc::Global>,)]) 
_2:  @ std::sync::MutexGuard<ReErased, Counter> 
_3:  @ std::result::Result<std::sync::MutexGuard<ReErased, Counter>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, Counter>>> 
_4:  @ &ReErased std::sync::Mutex<Counter> 
_5:  @ &ReErased std::sync::Mutex<Counter> 
_6:  @ &ReErased std::sync::Arc<std::sync::Mutex<Counter>, std::alloc::Global> 
_7:  @ () 
_8:  @ &ReErased mut Counter 
_9:  @ &ReErased mut Counter 
_10:  @ &ReErased mut std::sync::MutexGuard<ReErased, Counter> 
_11:  @ &ReErased mut std::sync::MutexGuard<ReErased, Counter> 

bb 0 {
CleanUp: false
    StorageLive(_2) @ StorageLive
    StorageLive(_3) @ StorageLive
    StorageLive(_4) @ StorageLive
    StorageLive(_5) @ StorageLive
    StorageLive(_6) @ StorageLive
    Assign((_6, &(_1.0: std::sync::Arc<std::sync::Mutex<Counter>>))) @ _6=&(_1.0: std::sync::Arc<std::sync::Mutex<Counter>>) @ Ref
    _5 = <std::sync::Arc<std::sync::Mutex<Counter>> as std::ops::Deref>::deref(move _6) -> [return: bb1, unwind: bb10] @ Call: FnDid: 3101
}
bb 1 {
CleanUp: false
    Assign((_4, &(*_5))) @ _4=&(*_5) @ Ref
    StorageDead(_6) @ StorageDead
    _3 = std::sync::Mutex::<Counter>::lock(move _4) -> [return: bb2, unwind: bb10] @ Call: FnDid: 6375
}
bb 2 {
CleanUp: false
    StorageDead(_4) @ StorageDead
    _2 = std::result::Result::<std::sync::MutexGuard<'_, Counter>, std::sync::PoisonError<std::sync::MutexGuard<'_, Counter>>>::unwrap(move _3) -> [return: bb3, unwind: bb9] @ Call: FnDid: 9195
}
bb 3 {
CleanUp: false
    StorageDead(_3) @ StorageDead
    FakeRead((ForLet(None), _2)) @ FakeRead
    StorageDead(_5) @ StorageDead
    StorageLive(_7) @ StorageLive
    StorageLive(_8) @ StorageLive
    StorageLive(_9) @ StorageLive
    StorageLive(_10) @ StorageLive
    StorageLive(_11) @ StorageLive
    Assign((_11, &mut _2)) @ _11=&mut _2 @ Ref
    Assign((_10, &mut (*_11))) @ _10=&mut (*_11) @ Ref
    _9 = <std::sync::MutexGuard<'_, Counter> as std::ops::DerefMut>::deref_mut(move _10) -> [return: bb4, unwind: bb8] @ Call: FnDid: 3113
}
bb 4 {
CleanUp: false
    Assign((_8, &mut (*_9))) @ _8=&mut (*_9) @ Ref
    StorageDead(_10) @ StorageDead
    _7 = do_work(move _8) -> [return: bb5, unwind: bb8] @ Call: FnDid: 13
}
bb 5 {
CleanUp: false
    StorageDead(_8) @ StorageDead
    StorageDead(_11) @ StorageDead
    StorageDead(_9) @ StorageDead
    StorageDead(_7) @ StorageDead
    Assign((_0, const ())) @ _0=const () @ Use
    drop(_2) -> [return: bb6, unwind: bb10] @ Drop
}
bb 6 {
CleanUp: false
    StorageDead(_2) @ StorageDead
    drop(_1) -> [return: bb7, unwind: bb11] @ Drop
}
bb 7 {
CleanUp: false
    return @ Return
}
bb 8 {
CleanUp: true
    drop(_2) -> [return: bb10, unwind terminate(cleanup)] @ Drop
}
bb 9 {
CleanUp: true
    drop(_3) -> [return: bb10, unwind terminate(cleanup)] @ Drop
}
bb 10 {
CleanUp: true
    drop(_1) -> [return: bb11, unwind terminate(cleanup)] @ Drop
}
bb 11 {
CleanUp: true
    resume @ UnwindResume
}

