Show MIR
DefId(0:6 ~ test[fc21]::main)
_0:  @ () 
_1:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_2:  @ std::sync::Mutex<i32> 
_3:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_4:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_5:  @ std::sync::MutexGuard<ReErased, i32> 
_6:  @ std::result::Result<std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>> 
_7:  @ &ReErased std::sync::Mutex<i32> 
_8:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_9:  @ std::sync::MutexGuard<ReErased, i32> 
_10:  @ std::result::Result<std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>> 
_11:  @ &ReErased std::sync::Mutex<i32> 
_12:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 

[mutex1 => _1, mutex2 => _3]
bb 0 {
CleanUp: false
    _2 = std::sync::Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind continue] @ Call: FnDid: 6194, args: [i32]
}
bb 1 {
CleanUp: false
    _1 = std::sync::Arc::<std::sync::Mutex<i32>>::new(move _2) -> [return: bb2, unwind continue] @ Call: FnDid: 6025, args: [std::sync::Mutex<i32>]
}
bb 2 {
CleanUp: false
    Assign((_4, &_1)) @ _4=&_1 @ RefThe type is []
    _3 = <std::sync::Arc<std::sync::Mutex<i32>> as std::clone::Clone>::clone(move _4) -> [return: bb3, unwind: bb15] @ Call: FnDid: 2441, args: [std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global>]
}
bb 3 {
CleanUp: false
    Assign((_8, &_1)) @ _8=&_1 @ RefThe type is []
    _7 = <std::sync::Arc<std::sync::Mutex<i32>> as std::ops::Deref>::deref(move _8) -> [return: bb4, unwind: bb14] @ Call: FnDid: 3101, args: [std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global>]
}
bb 4 {
CleanUp: false
    _6 = std::sync::Mutex::<i32>::lock(_7) -> [return: bb5, unwind: bb14] @ Call: FnDid: 6197, args: [i32]
}
bb 5 {
CleanUp: false
    _5 = std::result::Result::<std::sync::MutexGuard<'_, i32>, std::sync::PoisonError<std::sync::MutexGuard<'_, i32>>>::unwrap(move _6) -> [return: bb6, unwind: bb14] @ Call: FnDid: 9204, args: [std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>]
}
bb 6 {
CleanUp: false
    drop(_5) -> [return: bb7, unwind: bb14] @ Drop
}
bb 7 {
CleanUp: false
    Assign((_12, &_3)) @ _12=&_3 @ RefThe type is []
    _11 = <std::sync::Arc<std::sync::Mutex<i32>> as std::ops::Deref>::deref(move _12) -> [return: bb8, unwind: bb14] @ Call: FnDid: 3101, args: [std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global>]
}
bb 8 {
CleanUp: false
    _10 = std::sync::Mutex::<i32>::lock(_11) -> [return: bb9, unwind: bb14] @ Call: FnDid: 6197, args: [i32]
}
bb 9 {
CleanUp: false
    _9 = std::result::Result::<std::sync::MutexGuard<'_, i32>, std::sync::PoisonError<std::sync::MutexGuard<'_, i32>>>::unwrap(move _10) -> [return: bb10, unwind: bb14] @ Call: FnDid: 9204, args: [std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>]
}
bb 10 {
CleanUp: false
    drop(_9) -> [return: bb11, unwind: bb14] @ Drop
}
bb 11 {
CleanUp: false
    drop(_3) -> [return: bb12, unwind: bb15] @ Drop
}
bb 12 {
CleanUp: false
    drop(_1) -> [return: bb13, unwind continue] @ Drop
}
bb 13 {
CleanUp: false
    return @ Return
}
bb 14 {
CleanUp: true
    drop(_3) -> [return: bb15, unwind terminate(cleanup)] @ Drop
}
bb 15 {
CleanUp: true
    drop(_1) -> [return: bb16, unwind terminate(cleanup)] @ Drop
}
bb 16 {
CleanUp: true
    resume @ UnwindResume
}

DefId(0:7 ~ test[fc21]::tt)
_0:  @ () 
_1:  @ &ReErased std::sync::Mutex<i32> 
_2:  @ () 

[b => _1]
bb 0 {
CleanUp: false
    _2 = tt2(_1) -> [return: bb1, unwind continue] @ Call: FnDid: 8, args: []
}
bb 1 {
CleanUp: false
    return @ Return
}

DefId(0:8 ~ test[fc21]::tt2)
_0:  @ () 
_1:  @ &ReErased std::sync::Mutex<i32> 

[b => _1]
bb 0 {
CleanUp: false
    return @ Return
}

