DefId(0:6 ~ t3[9601]::main)
_0:  @ () 
_1:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_2:  @ std::sync::Mutex<i32> 
_3:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_4:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_5:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_6:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_7:  @ () 
_8:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_9:  @ () 
_10:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_11:  @ () 
_12:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_13:  @ () 
_14:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_15:  @ bool 
_16:  @ bool 
_17:  @ bool 

[a => _1, b => _3, c => _5]
bb 0 {
CleanUp: false
    Assign((_17, const false)) @ _17=const false @ Use Constant
    Assign((_16, const false)) @ _16=const false @ Use Constant
    Assign((_15, const false)) @ _15=const false @ Use Constant
    _2 = std::sync::Mutex::<i32>::new(const 123_i32) -> [return: bb1, unwind continue] @ Call: FnDid: DefId(1:6372 ~ std[2f0b]::sync::mutex::{impl#4}::new)
}
bb 1 {
CleanUp: false
    Assign((_17, const true)) @ _17=const true @ Use Constant
    _1 = std::sync::Arc::<std::sync::Mutex<i32>>::new(move _2) -> [return: bb2, unwind continue] @ Call: FnDid: DefId(5:6025 ~ alloc[a1b6]::sync::{impl#14}::new)
}
bb 2 {
CleanUp: false
    Assign((_4, &_1)) @ _4=&_1 @ RefThe type is []
    _3 = <std::sync::Arc<std::sync::Mutex<i32>> as std::clone::Clone>::clone(move _4) -> [return: bb3, unwind: bb15] @ Call: FnDid: DefId(2:2441 ~ core[0c3f]::clone::Clone::clone)
}
bb 3 {
CleanUp: false
    Assign((_16, const true)) @ _16=const true @ Use Constant
    Assign((_6, &_3)) @ _6=&_3 @ RefThe type is []
    _5 = <std::sync::Arc<std::sync::Mutex<i32>> as std::clone::Clone>::clone(_6) -> [return: bb4, unwind: bb13] @ Call: FnDid: DefId(2:2441 ~ core[0c3f]::clone::Clone::clone)
}
bb 4 {
CleanUp: false
    Assign((_15, const true)) @ _15=const true @ Use Constant
    Assign((_8, &_1)) @ _8=&_1 @ RefThe type is []
    _7 = test(_8) -> [return: bb5, unwind: bb11] @ Call: FnDid: DefId(0:8 ~ t3[9601]::test)
}
bb 5 {
CleanUp: false
    Assign((_17, const false)) @ _17=const false @ Use Constant
    Assign((_10, move _1)) @ _10=move _1 @ Use MoveThe type is []
    _9 = testing(move _10) -> [return: bb6, unwind: bb11] @ Call: FnDid: DefId(0:7 ~ t3[9601]::testing)
}
bb 6 {
CleanUp: false
    Assign((_16, const false)) @ _16=const false @ Use Constant
    Assign((_12, move _3)) @ _12=move _3 @ Use MoveThe type is []
    _11 = testing(move _12) -> [return: bb7, unwind: bb11] @ Call: FnDid: DefId(0:7 ~ t3[9601]::testing)
}
bb 7 {
CleanUp: false
    Assign((_15, const false)) @ _15=const false @ Use Constant
    Assign((_14, move _5)) @ _14=move _5 @ Use MoveThe type is []
    _13 = testing(move _14) -> [return: bb8, unwind: bb11] @ Call: FnDid: DefId(0:7 ~ t3[9601]::testing)
}
bb 8 {
CleanUp: false
    Assign((_15, const false)) @ _15=const false @ Use Constant
    Assign((_16, const false)) @ _16=const false @ Use Constant
    Assign((_17, const false)) @ _17=const false @ Use Constant
    return @ Return
}
bb 9 {
CleanUp: true
    resume @ UnwindResume
}
bb 10 {
CleanUp: true
    drop(_5) -> [return: bb13, unwind terminate(cleanup)] @ Drop
}
bb 11 {
CleanUp: true
    switchInt(_15) -> [0: bb13, otherwise: bb10] @ SwitchInt
}
bb 12 {
CleanUp: true
    drop(_3) -> [return: bb15, unwind terminate(cleanup)] @ Drop
}
bb 13 {
CleanUp: true
    switchInt(_16) -> [0: bb15, otherwise: bb12] @ SwitchInt
}
bb 14 {
CleanUp: true
    drop(_1) -> [return: bb9, unwind terminate(cleanup)] @ Drop
}
bb 15 {
CleanUp: true
    switchInt(_17) -> [0: bb9, otherwise: bb14] @ SwitchInt
}

DefId(0:7 ~ t3[9601]::testing)
_0:  @ () 
_1:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_2:  @ std::result::Result<std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>> 
_3:  @ &ReErased std::sync::Mutex<i32> 
_4:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 

[a => _1]
bb 0 {
CleanUp: false
    Assign((_4, &_1)) @ _4=&_1 @ RefThe type is []
    _3 = <std::sync::Arc<std::sync::Mutex<i32>> as std::ops::Deref>::deref(move _4) -> [return: bb1, unwind: bb5] @ Call: FnDid: DefId(2:3101 ~ core[0c3f]::ops::deref::Deref::deref)
}
bb 1 {
CleanUp: false
    _2 = std::sync::Mutex::<i32>::lock(_3) -> [return: bb2, unwind: bb5] @ Call: FnDid: DefId(1:6375 ~ std[2f0b]::sync::mutex::{impl#5}::lock)
}
bb 2 {
CleanUp: false
    drop(_2) -> [return: bb3, unwind: bb5] @ Drop
}
bb 3 {
CleanUp: false
    drop(_1) -> [return: bb4, unwind continue] @ Drop
}
bb 4 {
CleanUp: false
    return @ Return
}
bb 5 {
CleanUp: true
    drop(_1) -> [return: bb6, unwind terminate(cleanup)] @ Drop
}
bb 6 {
CleanUp: true
    resume @ UnwindResume
}

DefId(0:8 ~ t3[9601]::test)
_0:  @ () 
_1:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_2:  @ std::result::Result<std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>> 
_3:  @ &ReErased std::sync::Mutex<i32> 

[a => _1]
bb 0 {
CleanUp: false
    _3 = <std::sync::Arc<std::sync::Mutex<i32>> as std::ops::Deref>::deref(_1) -> [return: bb1, unwind continue] @ Call: FnDid: DefId(2:3101 ~ core[0c3f]::ops::deref::Deref::deref)
}
bb 1 {
CleanUp: false
    _2 = std::sync::Mutex::<i32>::lock(_3) -> [return: bb2, unwind continue] @ Call: FnDid: DefId(1:6375 ~ std[2f0b]::sync::mutex::{impl#5}::lock)
}
bb 2 {
CleanUp: false
    drop(_2) -> [return: bb3, unwind continue] @ Drop
}
bb 3 {
CleanUp: false
    return @ Return
}

Node ID: GraphNodeId { def_id: DefId(0:8 ~ t3[9601]::test), index: 2 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:8 ~ t3[9601]::test), index: 2 }
  Out Labels:
    - Guard
  In Labels:
  Successors:
    - Label: Guard
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 2 }
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:8 ~ t3[9601]::test), index: 1 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:8 ~ t3[9601]::test), index: 1 }
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 8 }
  Out Labels:
    - Deref
  In Labels:
  Successors:
    - Label: Deref
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 1 }
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 16 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 16 }
  Out Labels:
  In Labels:
  Successors:
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 1 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 1 }
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 3 }
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 5 }
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 10 }
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 12 }
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 14 }
    - Node ID: GraphNodeId { def_id: DefId(0:7 ~ t3[9601]::testing), index: 1 }
    - Node ID: GraphNodeId { def_id: DefId(0:7 ~ t3[9601]::testing), index: 3 }
    - Node ID: GraphNodeId { def_id: DefId(0:8 ~ t3[9601]::test), index: 5 }
    - Node ID: GraphNodeId { def_id: DefId(0:8 ~ t3[9601]::test), index: 3 }
  Out Labels:
    - Deref
  In Labels:
    - Deref
  Successors:
    - Label: Deref
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 2 }
  Predecessors:
    - Label: Deref
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 4 }
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 6 }
      - Node ID: GraphNodeId { def_id: DefId(0:7 ~ t3[9601]::testing), index: 4 }
      - Node ID: GraphNodeId { def_id: DefId(0:8 ~ t3[9601]::test), index: 1 }

Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 4 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 4 }
  Out Labels:
    - Deref
  In Labels:
  Successors:
    - Label: Deref
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 1 }
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 6 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 6 }
  Out Labels:
    - Deref
  In Labels:
  Successors:
    - Label: Deref
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 1 }
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 17 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 17 }
  Out Labels:
  In Labels:
  Successors:
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 15 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 15 }
  Out Labels:
  In Labels:
  Successors:
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 2 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 2 }
  Out Labels:
  In Labels:
    - Deref
    - Guard
  Successors:
  Predecessors:
    - Label: Deref
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 1 }
    - Label: Guard
      - Node ID: GraphNodeId { def_id: DefId(0:7 ~ t3[9601]::testing), index: 2 }
      - Node ID: GraphNodeId { def_id: DefId(0:8 ~ t3[9601]::test), index: 2 }

Node ID: GraphNodeId { def_id: DefId(0:7 ~ t3[9601]::testing), index: 4 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:7 ~ t3[9601]::testing), index: 4 }
  Out Labels:
    - Deref
  In Labels:
  Successors:
    - Label: Deref
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 1 }
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 7 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 7 }
    - Node ID: GraphNodeId { def_id: DefId(0:8 ~ t3[9601]::test), index: 0 }
  Out Labels:
  In Labels:
  Successors:
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:7 ~ t3[9601]::testing), index: 2 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:7 ~ t3[9601]::testing), index: 2 }
  Out Labels:
    - Guard
  In Labels:
  Successors:
    - Label: Guard
      - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 2 }
  Predecessors:

Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 11 }
  Alias Set:
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 11 }
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 9 }
    - Node ID: GraphNodeId { def_id: DefId(0:6 ~ t3[9601]::main), index: 13 }
    - Node ID: GraphNodeId { def_id: DefId(0:7 ~ t3[9601]::testing), index: 0 }
  Out Labels:
  In Labels:
  Successors:
  Predecessors: