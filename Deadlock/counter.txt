Discover Function: DefId(0:13 ~ counter[c400]::do_work) do_work
mir:BasicBlocks {
    basic_blocks: [
        BasicBlockData {
            statements: [
                _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 5_i32 },
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:24:14: 24:18 (#17),
                        scope: scope[0],
                    },
                    kind: _2 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _3) -> [return: bb1, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _4 = move _2,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:24:5: 27:6 (#16),
                        scope: scope[1],
                    },
                    kind: goto -> bb2,
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _6 = &mut _4,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:24:14: 24:18 (#17),
                        scope: scope[1],
                    },
                    kind: _5 = <std::ops::Range<i32> as std::iter::Iterator>::next(_6) -> [return: bb3, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _7 = discriminant(_5),
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:24:14: 24:18 (#17),
                        scope: scope[1],
                    },
                    kind: switchInt(move _7) -> [0: bb5, 1: bb4, otherwise: bb8],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:25:9: 25:28 (#0),
                        scope: scope[1],
                    },
                    kind: _8 = Counter::increment(_1) -> [return: bb6, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:28:2: 28:2 (#0),
                        scope: scope[0],
                    },
                    kind: return,
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:26:23: 26:60 (#0),
                        scope: scope[1],
                    },
                    kind: _10 = std::time::Duration::from_millis(const 100_u64) -> [return: bb7, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:26:9: 26:61 (#0),
                        scope: scope[1],
                    },
                    kind: _9 = std::thread::sleep(move _10) -> [return: bb2, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:24:14: 24:18 (#17),
                        scope: scope[1],
                    },
                    kind: unreachable,
                },
            ),
            is_cleanup: false,
        },
    ],
    cache: Cache {
        predecessors: OnceLock(
            <uninit>,
        ),
        switch_sources: OnceLock(
            <uninit>,
        ),
        is_cyclic: OnceLock(
            <uninit>,
        ),
        reverse_postorder: OnceLock(
            <uninit>,
        ),
        dominators: OnceLock(
            <uninit>,
        ),
    },
}
Discover Function: DefId(0:10 ~ counter[c400]::{impl#0}::new) new
mir:BasicBlocks {
    basic_blocks: [
        BasicBlockData {
            statements: [
                _0 = Counter { count: const 0_i32 },
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:11:6: 11:6 (#0),
                        scope: scope[0],
                    },
                    kind: return,
                },
            ),
            is_cleanup: false,
        },
    ],
    cache: Cache {
        predecessors: OnceLock(
            <uninit>,
        ),
        switch_sources: OnceLock(
            <uninit>,
        ),
        is_cyclic: OnceLock(
            <uninit>,
        ),
        reverse_postorder: OnceLock(
            <uninit>,
        ),
        dominators: OnceLock(
            <uninit>,
        ),
    },
}
Discover Function: DefId(0:12 ~ counter[c400]::{impl#0}::get_count) get_count
mir:BasicBlocks {
    basic_blocks: [
        BasicBlockData {
            statements: [
                _0 = ((*_1).0: i32),
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:20:6: 20:6 (#0),
                        scope: scope[0],
                    },
                    kind: return,
                },
            ),
            is_cleanup: false,
        },
    ],
    cache: Cache {
        predecessors: OnceLock(
            <uninit>,
        ),
        switch_sources: OnceLock(
            <uninit>,
        ),
        is_cyclic: OnceLock(
            <uninit>,
        ),
        reverse_postorder: OnceLock(
            <uninit>,
        ),
        dominators: OnceLock(
            <uninit>,
        ),
    },
}
Discover Function: DefId(0:14 ~ counter[c400]::main) main
mir:BasicBlocks {
    basic_blocks: [
        BasicBlockData {
            statements: [
                _42 = const false,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:31:19: 31:33 (#0),
                        scope: scope[0],
                    },
                    kind: _1 = Counter::new() -> [return: bb1, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:32:28: 32:47 (#0),
                        scope: scope[1],
                    },
                    kind: _3 = std::sync::Mutex::<Counter>::new(move _1) -> [return: bb2, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:32:19: 32:48 (#0),
                        scope: scope[1],
                    },
                    kind: _2 = std::sync::Arc::<std::sync::Mutex<Counter>>::new(move _3) -> [return: bb3, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: /rustc/30dfb9e046aeb878db04332c74de76e52fb7db10/library/alloc/src/macros.rs:44:36: 44:59 (#6),
                        scope: scope[2],
                    },
                    kind: _4 = std::vec::Vec::<std::thread::JoinHandle<()>>::new() -> [return: bb4, unwind: bb31],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _42 = const true,
                _6 = std::ops::Range::<i32> { start: const 0_i32, end: const 3_i32 },
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:36:14: 36:18 (#20),
                        scope: scope[3],
                    },
                    kind: _5 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _6) -> [return: bb5, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _7 = move _5,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:36:5: 43:6 (#19),
                        scope: scope[4],
                    },
                    kind: goto -> bb6,
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _9 = &mut _7,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:36:14: 36:18 (#20),
                        scope: scope[4],
                    },
                    kind: _8 = <std::ops::Range<i32> as std::iter::Iterator>::next(_9) -> [return: bb7, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _10 = discriminant(_8),
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:36:14: 36:18 (#20),
                        scope: scope[4],
                    },
                    kind: switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb35],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _12 = &_2,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:37:23: 37:43 (#0),
                        scope: scope[4],
                    },
                    kind: _11 = <std::sync::Arc<std::sync::Mutex<Counter>> as std::clone::Clone>::clone(_12) -> [return: bb10, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _42 = const false,
                _18 = move _4,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:45:19: 45:26 (#23),
                        scope: scope[3],
                    },
                    kind: _17 = <std::vec::Vec<std::thread::JoinHandle<()>> as std::iter::IntoIterator>::into_iter(move _18) -> [return: bb12, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _14 = {closure@test/counter.rs:38:36: 38:43} { counter: move _11 },
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:38:22: 41:11 (#0),
                        scope: scope[5],
                    },
                    kind: _13 = std::thread::spawn::<{closure@test/counter.rs:38:36: 38:43}, ()>(move _14) -> [return: bb11, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _16 = &mut _4,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:42:9: 42:29 (#0),
                        scope: scope[6],
                    },
                    kind: _15 = std::vec::Vec::<std::thread::JoinHandle<()>>::push(move _16, move _13) -> [return: bb36, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _19 = move _17,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:45:5: 47:6 (#22),
                        scope: scope[7],
                    },
                    kind: goto -> bb13,
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _21 = &mut _19,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:45:19: 45:26 (#23),
                        scope: scope[7],
                    },
                    kind: _20 = <std::vec::IntoIter<std::thread::JoinHandle<()>> as std::iter::Iterator>::next(_21) -> [return: bb14, unwind: bb30],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _22 = discriminant(_20),
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:45:19: 45:26 (#23),
                        scope: scope[7],
                    },
                    kind: switchInt(move _22) -> [0: bb16, 1: bb15, otherwise: bb35],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _23 = move ((_20 as Some).0: std::thread::JoinHandle<()>),
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:46:9: 46:22 (#0),
                        scope: scope[8],
                    },
                    kind: _25 = std::thread::JoinHandle::<()>::join(move _23) -> [return: bb17, unwind: bb30],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:47:5: 47:6 (#22),
                        scope: scope[3],
                    },
                    kind: drop(_19) -> [return: bb18, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:46:9: 46:31 (#0),
                        scope: scope[8],
                    },
                    kind: _24 = std::result::Result::<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>::unwrap(move _25) -> [return: bb37, unwind: bb30],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _32 = &_2,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:49:23: 49:37 (#0),
                        scope: scope[3],
                    },
                    kind: _31 = <std::sync::Arc<std::sync::Mutex<Counter>> as std::ops::Deref>::deref(move _32) -> [return: bb19, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:49:23: 49:37 (#0),
                        scope: scope[3],
                    },
                    kind: _30 = std::sync::Mutex::<Counter>::lock(_31) -> [return: bb20, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:49:23: 49:46 (#0),
                        scope: scope[3],
                    },
                    kind: _29 = std::result::Result::<std::sync::MutexGuard<'_, Counter>, std::sync::PoisonError<std::sync::MutexGuard<'_, Counter>>>::unwrap(move _30) -> [return: bb21, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _28 = &_29,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:49:23: 49:58 (#0),
                        scope: scope[3],
                    },
                    kind: _27 = <std::sync::MutexGuard<'_, Counter> as std::ops::Deref>::deref(move _28) -> [return: bb22, unwind: bb29],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:49:23: 49:58 (#0),
                        scope: scope[3],
                    },
                    kind: _26 = Counter::get_count(_27) -> [return: bb23, unwind: bb29],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:49:58: 49:59 (#0),
                        scope: scope[3],
                    },
                    kind: drop(_29) -> [return: bb24, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _41 = const _,
                _35 = _41 as &[&str] (PointerCoercion(Unsize)),
                _40 = &_26,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:50:28: 50:30 (#10),
                        scope: scope[9],
                    },
                    kind: _39 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_40) -> [return: bb25, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _38 = [move _39],
                _37 = &_38,
                _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)),
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: /rustc/30dfb9e046aeb878db04332c74de76e52fb7db10/library/std/src/macros.rs:143:28: 143:61 (#10),
                        scope: scope[9],
                    },
                    kind: _34 = std::fmt::Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb26, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: /rustc/30dfb9e046aeb878db04332c74de76e52fb7db10/library/std/src/macros.rs:143:9: 143:62 (#9),
                        scope: scope[9],
                    },
                    kind: _33 = std::io::_print(move _34) -> [return: bb27, unwind: bb34],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _42 = const false,
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:51:1: 51:2 (#0),
                        scope: scope[1],
                    },
                    kind: drop(_2) -> [return: bb28, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:51:2: 51:2 (#0),
                        scope: scope[0],
                    },
                    kind: return,
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:49:58: 49:59 (#0),
                        scope: scope[3],
                    },
                    kind: drop(_29) -> [return: bb34, unwind terminate(cleanup)],
                },
            ),
            is_cleanup: true,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:47:5: 47:6 (#22),
                        scope: scope[3],
                    },
                    kind: drop(_19) -> [return: bb34, unwind terminate(cleanup)],
                },
            ),
            is_cleanup: true,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:51:1: 51:2 (#0),
                        scope: scope[1],
                    },
                    kind: drop(_2) -> [return: bb32, unwind terminate(cleanup)],
                },
            ),
            is_cleanup: true,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:30:1: 51:2 (#0),
                        scope: scope[0],
                    },
                    kind: resume,
                },
            ),
            is_cleanup: true,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:51:1: 51:2 (#0),
                        scope: scope[2],
                    },
                    kind: drop(_4) -> [return: bb31, unwind terminate(cleanup)],
                },
            ),
            is_cleanup: true,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:51:1: 51:2 (#0),
                        scope: scope[2],
                    },
                    kind: switchInt(_42) -> [0: bb31, otherwise: bb33],
                },
            ),
            is_cleanup: true,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:36:14: 36:18 (#20),
                        scope: scope[4],
                    },
                    kind: unreachable,
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:42:9: 42:29 (#0),
                        scope: scope[6],
                    },
                    kind: goto -> bb6,
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:46:9: 46:31 (#0),
                        scope: scope[8],
                    },
                    kind: goto -> bb13,
                },
            ),
            is_cleanup: false,
        },
    ],
    cache: Cache {
        predecessors: OnceLock(
            [
                [],
                [
                    bb0,
                ],
                [
                    bb1,
                ],
                [
                    bb2,
                ],
                [
                    bb3,
                ],
                [
                    bb4,
                ],
                [
                    bb5,
                    bb36,
                ],
                [
                    bb6,
                ],
                [
                    bb7,
                ],
                [
                    bb7,
                ],
                [
                    bb8,
                ],
                [
                    bb10,
                ],
                [
                    bb9,
                ],
                [
                    bb12,
                    bb37,
                ],
                [
                    bb13,
                ],
                [
                    bb14,
                ],
                [
                    bb14,
                ],
                [
                    bb15,
                ],
                [
                    bb16,
                ],
                [
                    bb18,
                ],
                [
                    bb19,
                ],
                [
                    bb20,
                ],
                [
                    bb21,
                ],
                [
                    bb22,
                ],
                [
                    bb23,
                ],
                [
                    bb24,
                ],
                [
                    bb25,
                ],
                [
                    bb26,
                ],
                [
                    bb27,
                ],
                [
                    bb21,
                    bb22,
                ],
                [
                    bb13,
                    bb15,
                    bb17,
                ],
                [
                    bb3,
                    bb33,
                    bb34,
                ],
                [
                    bb31,
                ],
                [
                    bb34,
                ],
                [
                    bb4,
                    bb6,
                    bb8,
                    bb9,
                    bb10,
                    bb11,
                    bb16,
                    bb18,
                    bb19,
                    bb20,
                    bb23,
                    bb24,
                    bb25,
                    bb26,
                    bb29,
                    bb30,
                ],
                [
                    bb7,
                    bb14,
                ],
                [
                    bb11,
                ],
                [
                    bb17,
                ],
            ],
        ),
        switch_sources: OnceLock(
            <uninit>,
        ),
        is_cyclic: OnceLock(
            <uninit>,
        ),
        reverse_postorder: OnceLock(
            <uninit>,
        ),
        dominators: OnceLock(
            Dominators {
                kind: General(
                    Inner {
                        post_order_rank: [
                            37,
                            36,
                            35,
                            34,
                            33,
                            32,
                            31,
                            30,
                            29,
                            25,
                            28,
                            27,
                            24,
                            23,
                            22,
                            20,
                            16,
                            19,
                            15,
                            14,
                            13,
                            12,
                            11,
                            9,
                            8,
                            7,
                            6,
                            1,
                            0,
                            10,
                            18,
                            3,
                            2,
                            4,
                            5,
                            21,
                            26,
                            17,
                        ],
                        immediate_dominators: [
                            None,
                            Some(
                                bb0,
                            ),
                            Some(
                                bb1,
                            ),
                            Some(
                                bb2,
                            ),
                            Some(
                                bb3,
                            ),
                            Some(
                                bb4,
                            ),
                            Some(
                                bb5,
                            ),
                            Some(
                                bb6,
                            ),
                            Some(
                                bb7,
                            ),
                            Some(
                                bb7,
                            ),
                            Some(
                                bb8,
                            ),
                            Some(
                                bb10,
                            ),
                            Some(
                                bb9,
                            ),
                            Some(
                                bb12,
                            ),
                            Some(
                                bb13,
                            ),
                            Some(
                                bb14,
                            ),
                            Some(
                                bb14,
                            ),
                            Some(
                                bb15,
                            ),
                            Some(
                                bb16,
                            ),
                            Some(
                                bb18,
                            ),
                            Some(
                                bb19,
                            ),
                            Some(
                                bb20,
                            ),
                            Some(
                                bb21,
                            ),
                            Some(
                                bb22,
                            ),
                            Some(
                                bb23,
                            ),
                            Some(
                                bb24,
                            ),
                            Some(
                                bb25,
                            ),
                            Some(
                                bb26,
                            ),
                            Some(
                                bb27,
                            ),
                            Some(
                                bb21,
                            ),
                            Some(
                                bb13,
                            ),
                            Some(
                                bb3,
                            ),
                            Some(
                                bb31,
                            ),
                            Some(
                                bb34,
                            ),
                            Some(
                                bb4,
                            ),
                            Some(
                                bb7,
                            ),
                            Some(
                                bb11,
                            ),
                            Some(
                                bb17,
                            ),
                        ],
                        time: [
                            Time {
                                start: 1,
                                finish: 38,
                            },
                            Time {
                                start: 2,
                                finish: 38,
                            },
                            Time {
                                start: 3,
                                finish: 38,
                            },
                            Time {
                                start: 4,
                                finish: 38,
                            },
                            Time {
                                start: 7,
                                finish: 38,
                            },
                            Time {
                                start: 10,
                                finish: 38,
                            },
                            Time {
                                start: 11,
                                finish: 38,
                            },
                            Time {
                                start: 12,
                                finish: 38,
                            },
                            Time {
                                start: 35,
                                finish: 38,
                            },
                            Time {
                                start: 14,
                                finish: 34,
                            },
                            Time {
                                start: 36,
                                finish: 38,
                            },
                            Time {
                                start: 37,
                                finish: 38,
                            },
                            Time {
                                start: 15,
                                finish: 34,
                            },
                            Time {
                                start: 16,
                                finish: 34,
                            },
                            Time {
                                start: 18,
                                finish: 34,
                            },
                            Time {
                                start: 32,
                                finish: 34,
                            },
                            Time {
                                start: 19,
                                finish: 31,
                            },
                            Time {
                                start: 33,
                                finish: 34,
                            },
                            Time {
                                start: 20,
                                finish: 31,
                            },
                            Time {
                                start: 21,
                                finish: 31,
                            },
                            Time {
                                start: 22,
                                finish: 31,
                            },
                            Time {
                                start: 23,
                                finish: 31,
                            },
                            Time {
                                start: 25,
                                finish: 31,
                            },
                            Time {
                                start: 26,
                                finish: 31,
                            },
                            Time {
                                start: 27,
                                finish: 31,
                            },
                            Time {
                                start: 28,
                                finish: 31,
                            },
                            Time {
                                start: 29,
                                finish: 31,
                            },
                            Time {
                                start: 30,
                                finish: 31,
                            },
                            Time {
                                start: 31,
                                finish: 31,
                            },
                            Time {
                                start: 24,
                                finish: 24,
                            },
                            Time {
                                start: 17,
                                finish: 17,
                            },
                            Time {
                                start: 5,
                                finish: 6,
                            },
                            Time {
                                start: 6,
                                finish: 6,
                            },
                            Time {
                                start: 9,
                                finish: 9,
                            },
                            Time {
                                start: 8,
                                finish: 9,
                            },
                            Time {
                                start: 13,
                                finish: 13,
                            },
                            Time {
                                start: 38,
                                finish: 38,
                            },
                            Time {
                                start: 34,
                                finish: 34,
                            },
                        ],
                    },
                ),
            },
        ),
    },
}
Discover Function: DefId(0:11 ~ counter[c400]::{impl#0}::increment) increment
mir:BasicBlocks {
    basic_blocks: [
        BasicBlockData {
            statements: [
                _2 = CheckedAdd(((*_1).0: i32), const 1_i32),
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:14:9: 14:24 (#0),
                        scope: scope[0],
                    },
                    kind: assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: i32), const 1_i32) -> [success: bb1, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                ((*_1).0: i32) = move (_2.0: i32),
                _11 = const _,
                _5 = _11 as &[&str] (PointerCoercion(Unsize)),
                _10 = &((*_1).0: i32),
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:15:42: 15:44 (#5),
                        scope: scope[0],
                    },
                    kind: _9 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_10) -> [return: bb2, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [
                _8 = [move _9],
                _7 = &_8,
                _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)),
            ],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: /rustc/30dfb9e046aeb878db04332c74de76e52fb7db10/library/std/src/macros.rs:143:28: 143:61 (#5),
                        scope: scope[0],
                    },
                    kind: _4 = std::fmt::Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: /rustc/30dfb9e046aeb878db04332c74de76e52fb7db10/library/std/src/macros.rs:143:9: 143:62 (#4),
                        scope: scope[0],
                    },
                    kind: _3 = std::io::_print(move _4) -> [return: bb4, unwind continue],
                },
            ),
            is_cleanup: false,
        },
        BasicBlockData {
            statements: [],
            terminator: Some(
                Terminator {
                    source_info: SourceInfo {
                        span: test/counter.rs:16:6: 16:6 (#0),
                        scope: scope[0],
                    },
                    kind: return,
                },
            ),
            is_cleanup: false,
        },
    ],
    cache: Cache {
        predecessors: OnceLock(
            <uninit>,
        ),
        switch_sources: OnceLock(
            <uninit>,
        ),
        is_cyclic: OnceLock(
            <uninit>,
        ),
        reverse_postorder: OnceLock(
            <uninit>,
        ),
        dominators: OnceLock(
            <uninit>,
        ),
    },
}
