DefId(0:6 ~ dl_1_match[7dda]::main)
_0:  @ () 
_1:  @ std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_2:  @ std::sync::Mutex<i32> 
_3:  @ std::result::Result<(), ()> 
_4:  @ std::result::Result<std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>> 
_5:  @ &ReErased std::sync::Mutex<i32> 
_6:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_7:  @ isize 
_8:  @ std::sync::MutexGuard<ReErased, i32> 
_9:  @ &ReErased mut i32 
_10:  @ &ReErased mut std::sync::MutexGuard<ReErased, i32> 
_11:  @ (i32, bool) 
_12:  @ () 
_13:  @ std::fmt::Arguments<ReErased> 
_14:  @ &ReErased [&ReErased str] 
_15:  @ &ReErased [core::fmt::rt::Argument<ReErased>] 
_16:  @ &ReErased [core::fmt::rt::Argument<ReErased>; 1_usize] 
_17:  @ [core::fmt::rt::Argument<ReErased>; 1_usize] 
_18:  @ core::fmt::rt::Argument<ReErased> 
_19:  @ &ReErased i32 
_20:  @ &ReErased std::sync::MutexGuard<ReErased, i32> 
_21:  @ std::result::Result<std::sync::MutexGuard<ReErased, i32>, std::sync::PoisonError<std::sync::MutexGuard<ReErased, i32>>> 
_22:  @ &ReErased std::sync::Mutex<i32> 
_23:  @ &ReErased std::sync::Arc<std::sync::Mutex<i32>, std::alloc::Global> 
_24:  @ isize 
_25:  @ std::sync::MutexGuard<ReErased, i32> 
_26:  @ &ReErased mut i32 
_27:  @ &ReErased mut std::sync::MutexGuard<ReErased, i32> 
_28:  @ (i32, bool) 
_29:  @ () 
_30:  @ std::fmt::Arguments<ReErased> 
_31:  @ &ReErased [&ReErased str] 
_32:  @ &ReErased [core::fmt::rt::Argument<ReErased>] 
_33:  @ &ReErased [core::fmt::rt::Argument<ReErased>; 1_usize] 
_34:  @ [core::fmt::rt::Argument<ReErased>; 1_usize] 
_35:  @ core::fmt::rt::Argument<ReErased> 
_36:  @ &ReErased i32 
_37:  @ &ReErased std::sync::MutexGuard<ReErased, i32> 
_38:  @ () 
_39:  @ std::fmt::Arguments<ReErased> 
_40:  @ &ReErased [&ReErased str] 
_41:  @ bool 
_42:  @ &ReErased std::result::Result<(), ()> 
_43:  @ () 
_44:  @ std::fmt::Arguments<ReErased> 
_45:  @ &ReErased [&ReErased str] 
_46:  @ () 
_47:  @ std::fmt::Arguments<ReErased> 
_48:  @ &ReErased [&ReErased str] 
_49:  @ &ReErased [&ReErased str; 1_usize] 
_50:  @ &ReErased [&ReErased str; 1_usize] 
_51:  @ &ReErased [&ReErased str; 1_usize] 
_52:  @ &ReErased [&ReErased str; 2_usize] 
_53:  @ &ReErased [&ReErased str; 2_usize] 
_54:  @ isize 
_55:  @ isize 
_56:  @ isize 
_57:  @ isize 

[lock => _1, result => _3, num => _8, num_again => _25]
bb 0 {
CleanUp: false
    _2 = std::sync::Mutex::<i32>::new(const 0_i32) -> [return: bb1, unwind continue] @ Call: FnDid: DefId(1:6372 ~ std[2f0b]::sync::mutex::{impl#4}::new)
}
bb 1 {
CleanUp: false
    _1 = std::sync::Arc::<std::sync::Mutex<i32>>::new(move _2) -> [return: bb2, unwind continue] @ Call: FnDid: DefId(5:6025 ~ alloc[a1b6]::sync::{impl#14}::new)
}
bb 2 {
CleanUp: false
    Assign((_6, &_1)) @ _6=&_1 @ RefThe type is []
    _5 = <std::sync::Arc<std::sync::Mutex<i32>> as std::ops::Deref>::deref(move _6) -> [return: bb3, unwind: bb33] @ Call: FnDid: DefId(2:3101 ~ core[0c3f]::ops::deref::Deref::deref)
}
bb 3 {
CleanUp: false
    _4 = std::sync::Mutex::<i32>::lock(_5) -> [return: bb4, unwind: bb33] @ Call: FnDid: DefId(1:6375 ~ std[2f0b]::sync::mutex::{impl#5}::lock)
}
bb 4 {
CleanUp: false
    Assign((_7, discriminant(_4))) @ _7=discriminant(_4) @ Discriminant
    switchInt(move _7) -> [0: bb6, 1: bb5, otherwise: bb45] @ SwitchInt
}
bb 5 {
CleanUp: false
    Assign((_3, std::result::Result::<(), ()>::Err(const ()))) @ _3=std::result::Result::<(), ()>::Err(const ()) @ Aggregate
    goto -> bb40 @ Goto
}
bb 6 {
CleanUp: false
    Assign((_8, move ((_4 as Ok).0: std::sync::MutexGuard<'_, i32>))) @ _8=move ((_4 as Ok).0: std::sync::MutexGuard<'_, i32>) @ Use MoveThe type is [Downcast(Some("Ok"), 0), Field(0, std::sync::MutexGuard<ReErased, i32>)]
    Assign((_10, &mut _8)) @ _10=&mut _8 @ RefThe type is []
    _9 = <std::sync::MutexGuard<'_, i32> as std::ops::DerefMut>::deref_mut(move _10) -> [return: bb7, unwind: bb32] @ Call: FnDid: DefId(2:3113 ~ core[0c3f]::ops::deref::DerefMut::deref_mut)
}
bb 7 {
CleanUp: false
    Assign((_11, CheckedAdd((*_9), const 1_i32))) @ _11=CheckedAdd((*_9), const 1_i32) @ CheckedBinaryOp
    assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_9), const 1_i32) -> [success: bb8, unwind: bb32] @ Assert
}
bb 8 {
CleanUp: false
    Assign(((*_9), move (_11.0: i32))) @ (*_9)=move (_11.0: i32) @ Use MoveThe type is [Field(0, i32)]
    Assign((_53, const _)) @ _53=const _ @ Use Constant
    Assign((_14, _53 as &[&str] (PointerCoercion(Unsize)))) @ _14=_53 as &[&str] (PointerCoercion(Unsize)) @ Cast
    Assign((_20, &_8)) @ _20=&_8 @ RefThe type is []
    _19 = <std::sync::MutexGuard<'_, i32> as std::ops::Deref>::deref(move _20) -> [return: bb9, unwind: bb32] @ Call: FnDid: DefId(2:3101 ~ core[0c3f]::ops::deref::Deref::deref)
}
bb 9 {
CleanUp: false
    _18 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_19) -> [return: bb10, unwind: bb32] @ Call: FnDid: DefId(2:9786 ~ core[0c3f]::fmt::rt::{impl#1}::new_display)
}
bb 10 {
CleanUp: false
    Assign((_17, [move _18])) @ _17=[move _18] @ Aggregate
    Assign((_16, &_17)) @ _16=&_17 @ RefThe type is []
    Assign((_15, _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)))) @ _15=_16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)) @ Cast
    _13 = std::fmt::Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb11, unwind: bb32] @ Call: FnDid: DefId(2:9866 ~ core[0c3f]::fmt::{impl#2}::new_v1)
}
bb 11 {
CleanUp: false
    _12 = std::io::_print(move _13) -> [return: bb12, unwind: bb32] @ Call: FnDid: DefId(1:3326 ~ std[2f0b]::io::stdio::_print)
}
bb 12 {
CleanUp: false
    Assign((_23, &_1)) @ _23=&_1 @ RefThe type is []
    _22 = <std::sync::Arc<std::sync::Mutex<i32>> as std::ops::Deref>::deref(move _23) -> [return: bb13, unwind: bb32] @ Call: FnDid: DefId(2:3101 ~ core[0c3f]::ops::deref::Deref::deref)
}
bb 13 {
CleanUp: false
    _21 = std::sync::Mutex::<i32>::lock(_22) -> [return: bb14, unwind: bb32] @ Call: FnDid: DefId(1:6375 ~ std[2f0b]::sync::mutex::{impl#5}::lock)
}
bb 14 {
CleanUp: false
    Assign((_24, discriminant(_21))) @ _24=discriminant(_21) @ Discriminant
    switchInt(move _24) -> [0: bb16, 1: bb15, otherwise: bb45] @ SwitchInt
}
bb 15 {
CleanUp: false
    Assign((_51, const _)) @ _51=const _ @ Use Constant
    Assign((_40, _51 as &[&str] (PointerCoercion(Unsize)))) @ _40=_51 as &[&str] (PointerCoercion(Unsize)) @ Cast
    _39 = std::fmt::Arguments::<'_>::new_const(move _40) -> [return: bb23, unwind: bb42] @ Call: FnDid: DefId(2:9865 ~ core[0c3f]::fmt::{impl#2}::new_const)
}
bb 16 {
CleanUp: false
    Assign((_25, move ((_21 as Ok).0: std::sync::MutexGuard<'_, i32>))) @ _25=move ((_21 as Ok).0: std::sync::MutexGuard<'_, i32>) @ Use MoveThe type is [Downcast(Some("Ok"), 0), Field(0, std::sync::MutexGuard<ReErased, i32>)]
    Assign((_27, &mut _25)) @ _27=&mut _25 @ RefThe type is []
    _26 = <std::sync::MutexGuard<'_, i32> as std::ops::DerefMut>::deref_mut(move _27) -> [return: bb17, unwind: bb31] @ Call: FnDid: DefId(2:3113 ~ core[0c3f]::ops::deref::DerefMut::deref_mut)
}
bb 17 {
CleanUp: false
    Assign((_28, CheckedAdd((*_26), const 1_i32))) @ _28=CheckedAdd((*_26), const 1_i32) @ CheckedBinaryOp
    assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_26), const 1_i32) -> [success: bb18, unwind: bb31] @ Assert
}
bb 18 {
CleanUp: false
    Assign(((*_26), move (_28.0: i32))) @ (*_26)=move (_28.0: i32) @ Use MoveThe type is [Field(0, i32)]
    Assign((_52, const _)) @ _52=const _ @ Use Constant
    Assign((_31, _52 as &[&str] (PointerCoercion(Unsize)))) @ _31=_52 as &[&str] (PointerCoercion(Unsize)) @ Cast
    Assign((_37, &_25)) @ _37=&_25 @ RefThe type is []
    _36 = <std::sync::MutexGuard<'_, i32> as std::ops::Deref>::deref(move _37) -> [return: bb19, unwind: bb31] @ Call: FnDid: DefId(2:3101 ~ core[0c3f]::ops::deref::Deref::deref)
}
bb 19 {
CleanUp: false
    _35 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_36) -> [return: bb20, unwind: bb31] @ Call: FnDid: DefId(2:9786 ~ core[0c3f]::fmt::rt::{impl#1}::new_display)
}
bb 20 {
CleanUp: false
    Assign((_34, [move _35])) @ _34=[move _35] @ Aggregate
    Assign((_33, &_34)) @ _33=&_34 @ RefThe type is []
    Assign((_32, _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)))) @ _32=_33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize)) @ Cast
    _30 = std::fmt::Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb21, unwind: bb31] @ Call: FnDid: DefId(2:9866 ~ core[0c3f]::fmt::{impl#2}::new_v1)
}
bb 21 {
CleanUp: false
    _29 = std::io::_print(move _30) -> [return: bb22, unwind: bb31] @ Call: FnDid: DefId(1:3326 ~ std[2f0b]::io::stdio::_print)
}
bb 22 {
CleanUp: false
    drop(_25) -> [return: bb37, unwind: bb42] @ Drop
}
bb 23 {
CleanUp: false
    _38 = std::io::_print(move _39) -> [return: bb46, unwind: bb42] @ Call: FnDid: DefId(1:3326 ~ std[2f0b]::io::stdio::_print)
}
bb 24 {
CleanUp: false
    switchInt(move _41) -> [0: bb27, otherwise: bb25] @ SwitchInt
}
bb 25 {
CleanUp: false
    Assign((_49, const _)) @ _49=const _ @ Use Constant
    Assign((_45, _49 as &[&str] (PointerCoercion(Unsize)))) @ _45=_49 as &[&str] (PointerCoercion(Unsize)) @ Cast
    _44 = std::fmt::Arguments::<'_>::new_const(move _45) -> [return: bb26, unwind: bb33] @ Call: FnDid: DefId(2:9865 ~ core[0c3f]::fmt::{impl#2}::new_const)
}
bb 26 {
CleanUp: false
    _43 = std::io::_print(move _44) -> [return: bb47, unwind: bb33] @ Call: FnDid: DefId(1:3326 ~ std[2f0b]::io::stdio::_print)
}
bb 27 {
CleanUp: false
    Assign((_50, const _)) @ _50=const _ @ Use Constant
    Assign((_48, _50 as &[&str] (PointerCoercion(Unsize)))) @ _48=_50 as &[&str] (PointerCoercion(Unsize)) @ Cast
    _47 = std::fmt::Arguments::<'_>::new_const(move _48) -> [return: bb28, unwind: bb33] @ Call: FnDid: DefId(2:9865 ~ core[0c3f]::fmt::{impl#2}::new_const)
}
bb 28 {
CleanUp: false
    _46 = std::io::_print(move _47) -> [return: bb48, unwind: bb33] @ Call: FnDid: DefId(1:3326 ~ std[2f0b]::io::stdio::_print)
}
bb 29 {
CleanUp: false
    drop(_1) -> [return: bb30, unwind continue] @ Drop
}
bb 30 {
CleanUp: false
    return @ Return
}
bb 31 {
CleanUp: true
    drop(_25) -> [return: bb42, unwind terminate(cleanup)] @ Drop
}
bb 32 {
CleanUp: true
    drop(_8) -> [return: bb44, unwind terminate(cleanup)] @ Drop
}
bb 33 {
CleanUp: true
    drop(_1) -> [return: bb34, unwind terminate(cleanup)] @ Drop
}
bb 34 {
CleanUp: true
    resume @ UnwindResume
}
bb 35 {
CleanUp: false
    Assign((_3, std::result::Result::<(), ()>::Ok(const ()))) @ _3=std::result::Result::<(), ()>::Ok(const ()) @ Aggregate
    drop(_8) -> [return: bb40, unwind: bb44] @ Drop
}
bb 36 {
CleanUp: false
    drop(_21) -> [return: bb35, unwind: bb32] @ Drop
}
bb 37 {
CleanUp: false
    Assign((_54, discriminant(_21))) @ _54=discriminant(_21) @ Discriminant
    switchInt(move _54) -> [0: bb35, otherwise: bb36] @ SwitchInt
}
bb 38 {
CleanUp: false
    Assign((_42, &_3)) @ _42=&_3 @ RefThe type is []
    _41 = std::result::Result::<(), ()>::is_ok(move _42) -> [return: bb24, unwind: bb33] @ Call: FnDid: DefId(2:9163 ~ core[0c3f]::result::{impl#0}::is_ok)
}
bb 39 {
CleanUp: false
    drop(_4) -> [return: bb38, unwind: bb33] @ Drop
}
bb 40 {
CleanUp: false
    Assign((_55, discriminant(_4))) @ _55=discriminant(_4) @ Discriminant
    switchInt(move _55) -> [0: bb38, otherwise: bb39] @ SwitchInt
}
bb 41 {
CleanUp: true
    drop(_21) -> [return: bb32, unwind terminate(cleanup)] @ Drop
}
bb 42 {
CleanUp: true
    Assign((_56, discriminant(_21))) @ _56=discriminant(_21) @ Discriminant
    switchInt(move _56) -> [0: bb32, otherwise: bb41] @ SwitchInt
}
bb 43 {
CleanUp: true
    drop(_4) -> [return: bb33, unwind terminate(cleanup)] @ Drop
}
bb 44 {
CleanUp: true
    Assign((_57, discriminant(_4))) @ _57=discriminant(_4) @ Discriminant
    switchInt(move _57) -> [0: bb33, otherwise: bb43] @ SwitchInt
}
bb 45 {
CleanUp: false
    unreachable @ Unreachable
}
bb 46 {
CleanUp: false
    goto -> bb37 @ Goto
}
bb 47 {
CleanUp: false
    goto -> bb29 @ Goto
}
bb 48 {
CleanUp: false
    goto -> bb29 @ Goto
}