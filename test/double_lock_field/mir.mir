DefId(0:16 ~ double_lock_field[4bec]::{impl#0}::set_minimal_gas_price)
_0:  @ std::result::Result<bool, &'{erased} str> 
_1:  @ &'{erased} Miner 
_2:  @ u32 
_3:  @ &'{erased} mut GasPricer 
_4:  @ &'{erased} mut std::sync::MutexGuard<'{erased}, GasPricer> 
_5:  @ std::sync::MutexGuard<'{erased}, GasPricer> 
_6:  @ std::result::Result<std::sync::MutexGuard<'{erased}, GasPricer>, std::sync::PoisonError<std::sync::MutexGuard<'{erased}, GasPricer>>> 
_7:  @ &'{erased} std::sync::Mutex<GasPricer> 
_8:  @ isize 
_9:  @ &'{erased} mut u32 
_10:  @ () 
_11:  @ &'{erased} mut GasPricer 
_12:  @ &'{erased} mut std::sync::MutexGuard<'{erased}, GasPricer> 
_13:  @ std::sync::MutexGuard<'{erased}, GasPricer> 
_14:  @ std::result::Result<std::sync::MutexGuard<'{erased}, GasPricer>, std::sync::PoisonError<std::sync::MutexGuard<'{erased}, GasPricer>>> 
_15:  @ &'{erased} std::sync::Mutex<GasPricer> 
_16:  @ &'{erased} str 

[self => _1, new_price => _2, val => _9]
bb 0 {
CleanUp: false
    Assign((_7, &((*_1).0: std::sync::Mutex<GasPricer>))) @ _7=&((*_1).0: std::sync::Mutex<GasPricer>) @ RefThe type is [Deref, Field(0, std::sync::Mutex<GasPricer>)]
    _6 = std::sync::Mutex::<GasPricer>::lock(move _7) -> [return: bb1, unwind continue] @ Call: FnDid: DefId(1:6622 ~ std[6cdf]::sync::mutex::{impl#7}::lock)
}
bb 1 {
CleanUp: false
    _5 = std::result::Result::<std::sync::MutexGuard<'_, GasPricer>, std::sync::PoisonError<std::sync::MutexGuard<'_, GasPricer>>>::unwrap(move _6) -> [return: bb2, unwind continue] @ Call: FnDid: DefId(2:9853 ~ core[c520]::result::{impl#0}::unwrap)
}
bb 2 {
CleanUp: false
    Assign((_4, &mut _5)) @ _4=&mut _5 @ RefThe type is []
    _3 = <std::sync::MutexGuard<'_, GasPricer> as std::ops::DerefMut>::deref_mut(move _4) -> [return: bb3, unwind: bb15] @ Call: FnDid: DefId(2:3549 ~ core[c520]::ops::deref::DerefMut::deref_mut)
}
bb 3 {
CleanUp: false
    Assign((_8, discriminant((*_3)))) @ _8=discriminant((*_3)) @ Discriminant
    switchInt(move _8) -> [0: bb6, 1: bb5, otherwise: bb4] @ SwitchInt
}
bb 4 {
CleanUp: false
    unreachable @ Unreachable
}
bb 5 {
CleanUp: false
    Assign((_16, const "Gas pricer already calibrated")) @ _16=const "Gas pricer already calibrated" @ Use Constant
    Assign((_0, std::result::Result::<bool, &str>::Err(move _16))) @ _0=std::result::Result::<bool, &str>::Err(move _16) @ Aggregate
    goto -> bb12 @ Goto
}
bb 6 {
CleanUp: false
    Assign((_9, &mut (((*_3) as Fixed).0: u32))) @ _9=&mut (((*_3) as Fixed).0: u32) @ RefThe type is [Deref, Downcast(Some("Fixed"), 0), Field(0, u32)]
    Assign(((*_9), _2)) @ (*_9)=_2 @ Use CopyThe type is []
    Assign((_15, &((*_1).0: std::sync::Mutex<GasPricer>))) @ _15=&((*_1).0: std::sync::Mutex<GasPricer>) @ RefThe type is [Deref, Field(0, std::sync::Mutex<GasPricer>)]
    _14 = std::sync::Mutex::<GasPricer>::lock(move _15) -> [return: bb7, unwind: bb15] @ Call: FnDid: DefId(1:6622 ~ std[6cdf]::sync::mutex::{impl#7}::lock)
}
bb 7 {
CleanUp: false
    _13 = std::result::Result::<std::sync::MutexGuard<'_, GasPricer>, std::sync::PoisonError<std::sync::MutexGuard<'_, GasPricer>>>::unwrap(move _14) -> [return: bb8, unwind: bb15] @ Call: FnDid: DefId(2:9853 ~ core[c520]::result::{impl#0}::unwrap)
}
bb 8 {
CleanUp: false
    Assign((_12, &mut _13)) @ _12=&mut _13 @ RefThe type is []
    _11 = <std::sync::MutexGuard<'_, GasPricer> as std::ops::DerefMut>::deref_mut(move _12) -> [return: bb9, unwind: bb14] @ Call: FnDid: DefId(2:3549 ~ core[c520]::ops::deref::DerefMut::deref_mut)
}
bb 9 {
CleanUp: false
    _10 = GasPricer::recalibrate(_11) -> [return: bb10, unwind: bb14] @ Call: FnDid: DefId(0:18 ~ double_lock_field[4bec]::{impl#1}::recalibrate)
}
bb 10 {
CleanUp: false
    drop(_13) -> [return: bb11, unwind: bb15] @ Drop
}
bb 11 {
CleanUp: false
    Assign((_0, std::result::Result::<bool, &str>::Ok(const true))) @ _0=std::result::Result::<bool, &str>::Ok(const true) @ Aggregate
    goto -> bb12 @ Goto
}
bb 12 {
CleanUp: false
    drop(_5) -> [return: bb13, unwind continue] @ Drop
}
bb 13 {
CleanUp: false
    return @ Return
}
bb 14 {
CleanUp: true
    drop(_13) -> [return: bb15, unwind terminate(cleanup)] @ Drop
}
bb 15 {
CleanUp: true
    drop(_5) -> [return: bb16, unwind terminate(cleanup)] @ Drop
}
bb 16 {
CleanUp: true
    resume @ UnwindResume
}

DefId(0:18 ~ double_lock_field[4bec]::{impl#1}::recalibrate)
_0:  @ () 
_1:  @ &'{erased} mut GasPricer 
_2:  @ isize 
_3:  @ &'{erased} mut u32 
_4:  @ (u32, bool) 

[self => _1, val => _3]
bb 0 {
CleanUp: false
    Assign((_2, discriminant((*_1)))) @ _2=discriminant((*_1)) @ Discriminant
    switchInt(move _2) -> [0: bb2, 1: bb4, otherwise: bb1] @ SwitchInt
}
bb 1 {
CleanUp: false
    unreachable @ Unreachable
}
bb 2 {
CleanUp: false
    Assign((_3, &mut (((*_1) as Fixed).0: u32))) @ _3=&mut (((*_1) as Fixed).0: u32) @ RefThe type is [Deref, Downcast(Some("Fixed"), 0), Field(0, u32)]
    Assign((_4, AddWithOverflow((*_3), const 10_u32))) @ _4=AddWithOverflow((*_3), const 10_u32) @ BinaryOp
    assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_3), const 10_u32) -> [success: bb3, unwind continue] @ Assert
}
bb 3 {
CleanUp: false
    Assign(((*_3), move (_4.0: u32))) @ (*_3)=move (_4.0: u32) @ Use MoveThe type is [Field(0, u32)]
    goto -> bb4 @ Goto
}
bb 4 {
CleanUp: false
    return @ Return
}

DefId(0:19 ~ double_lock_field[4bec]::main)
_0:  @ () 
_1:  @ Miner 
_2:  @ std::sync::Mutex<GasPricer> 
_3:  @ GasPricer 
_4:  @ std::result::Result<bool, &'{erased} str> 
_5:  @ &'{erased} Miner 
_6:  @ isize 
_7:  @ bool 
_8:  @ () 
_9:  @ std::fmt::Arguments<'{erased}> 
_10:  @ &'{erased} [&'{erased} str; 2_usize] 
_11:  @ &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize] 
_12:  @ [core::fmt::rt::Argument<'{erased}>; 1_usize] 
_13:  @ core::fmt::rt::Argument<'{erased}> 
_14:  @ &'{erased} bool 
_15:  @ &'{erased} str 
_16:  @ () 
_17:  @ std::fmt::Arguments<'{erased}> 
_18:  @ &'{erased} [&'{erased} str; 2_usize] 
_19:  @ &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize] 
_20:  @ [core::fmt::rt::Argument<'{erased}>; 1_usize] 
_21:  @ core::fmt::rt::Argument<'{erased}> 
_22:  @ &'{erased} &'{erased} str 

[miner => _1, success => _7, err => _15]
bb 0 {
CleanUp: false
    Assign((_3, GasPricer::Fixed(const 100_u32))) @ _3=GasPricer::Fixed(const 100_u32) @ Aggregate
    _2 = std::sync::Mutex::<GasPricer>::new(move _3) -> [return: bb1, unwind continue] @ Call: FnDid: DefId(1:6619 ~ std[6cdf]::sync::mutex::{impl#6}::new)
}
bb 1 {
CleanUp: false
    Assign((_1, Miner { gas_pricer: move _2 })) @ _1=Miner { gas_pricer: move _2 } @ Aggregate
    Assign((_5, &_1)) @ _5=&_1 @ RefThe type is []
    _4 = Miner::set_minimal_gas_price(move _5, const 200_u32) -> [return: bb2, unwind continue] @ Call: FnDid: DefId(0:16 ~ double_lock_field[4bec]::{impl#0}::set_minimal_gas_price)
}
bb 2 {
CleanUp: false
    Assign((_6, discriminant(_4))) @ _6=discriminant(_4) @ Discriminant
    switchInt(move _6) -> [0: bb5, 1: bb4, otherwise: bb3] @ SwitchInt
}
bb 3 {
CleanUp: false
    unreachable @ Unreachable
}
bb 4 {
CleanUp: false
    Assign((_15, ((_4 as Err).0: &str))) @ _15=((_4 as Err).0: &str) @ Use CopyThe type is [Downcast(Some("Err"), 1), Field(0, &'{erased} str)]
    Assign((_18, const main::promoted[0])) @ _18=const main::promoted[0] @ Use Constant
    Assign((_22, &_15)) @ _22=&_15 @ RefThe type is []
    _21 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_22) -> [return: bb8, unwind continue] @ Call: FnDid: DefId(2:10457 ~ core[c520]::fmt::rt::{impl#1}::new_display)
}
bb 5 {
CleanUp: false
    Assign((_7, ((_4 as Ok).0: bool))) @ _7=((_4 as Ok).0: bool) @ Use CopyThe type is [Downcast(Some("Ok"), 0), Field(0, bool)]
    Assign((_10, const main::promoted[1])) @ _10=const main::promoted[1] @ Use Constant
    Assign((_14, &_7)) @ _14=&_7 @ RefThe type is []
    _13 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_14) -> [return: bb6, unwind continue] @ Call: FnDid: DefId(2:10457 ~ core[c520]::fmt::rt::{impl#1}::new_display)
}
bb 6 {
CleanUp: false
    Assign((_12, [move _13])) @ _12=[move _13] @ Aggregate
    Assign((_11, &_12)) @ _11=&_12 @ RefThe type is []
    _9 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(_10, _11) -> [return: bb7, unwind continue] @ Call: FnDid: DefId(2:10536 ~ core[c520]::fmt::{impl#2}::new_v1)
}
bb 7 {
CleanUp: false
    _8 = std::io::_print(move _9) -> [return: bb10, unwind continue] @ Call: FnDid: DefId(1:3499 ~ std[6cdf]::io::stdio::_print)
}
bb 8 {
CleanUp: false
    Assign((_20, [move _21])) @ _20=[move _21] @ Aggregate
    Assign((_19, &_20)) @ _19=&_20 @ RefThe type is []
    _17 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(_18, _19) -> [return: bb9, unwind continue] @ Call: FnDid: DefId(2:10536 ~ core[c520]::fmt::{impl#2}::new_v1)
}
bb 9 {
CleanUp: false
    _16 = std::io::_print(move _17) -> [return: bb10, unwind continue] @ Call: FnDid: DefId(1:3499 ~ std[6cdf]::io::stdio::_print)
}
bb 10 {
CleanUp: false
    return @ Return
}

DefId(0:8 ~ double_lock_field[4bec]::GasPricer::Fixed::{constructor#0})
_0:  @ GasPricer 
_1:  @ u32 

[]
bb 0 {
CleanUp: false
    Assign((_0, GasPricer::Fixed(move _1))) @ _0=GasPricer::Fixed(move _1) @ Aggregate
    return @ Return
}

DefId(0:11 ~ double_lock_field[4bec]::GasPricer::Calibrated::{constructor#0})
_0:  @ GasPricer 
_1:  @ u32 

[]
bb 0 {
CleanUp: false
    Assign((_0, GasPricer::Calibrated(move _1))) @ _0=GasPricer::Calibrated(move _1) @ Aggregate
    return @ Return
}